
COM_F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009084  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08009230  08009230  0000a230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800928c  0800928c  0000b0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800928c  0800928c  0000a28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009294  08009294  0000b0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009294  08009294  0000a294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009298  08009298  0000a298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800929c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0fc  2**0
                  CONTENTS
 10 .bss          00001f90  200000fc  200000fc  0000b0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000208c  2000208c  0000b0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130b8  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033b2  00000000  00000000  0001e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00021598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2c  00000000  00000000  00022468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025aa1  00000000  00000000  00022f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ef1  00000000  00000000  00048a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6397  00000000  00000000  0005c926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132cbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c28  00000000  00000000  00132d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00136928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000fc 	.word	0x200000fc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009218 	.word	0x08009218

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000100 	.word	0x20000100
 80001e8:	08009218 	.word	0x08009218

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Calculate_Checksum>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t Calculate_Checksum(uint8_t *data, uint16_t length) {
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	807b      	strh	r3, [r7, #2]
	uint8_t temp = data[0];
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 1; i < length; i++) {
 80004ee:	2301      	movs	r3, #1
 80004f0:	81bb      	strh	r3, [r7, #12]
 80004f2:	e009      	b.n	8000508 <Calculate_Checksum+0x2c>
    	temp ^=  data[i];
 80004f4:	89bb      	ldrh	r3, [r7, #12]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	4053      	eors	r3, r2
 8000500:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 1; i < length; i++) {
 8000502:	89bb      	ldrh	r3, [r7, #12]
 8000504:	3301      	adds	r3, #1
 8000506:	81bb      	strh	r3, [r7, #12]
 8000508:	89ba      	ldrh	r2, [r7, #12]
 800050a:	887b      	ldrh	r3, [r7, #2]
 800050c:	429a      	cmp	r2, r3
 800050e:	d3f1      	bcc.n	80004f4 <Calculate_Checksum+0x18>
    }
    return temp;
 8000510:	7bfb      	ldrb	r3, [r7, #15]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <HAL_UARTEx_RxEventCallback>:
uint32_t count=0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	460b      	mov	r3, r1
 8000528:	807b      	strh	r3, [r7, #2]
//        CDC_Transmit_FS(udma4_rx_buffer, rx_size4);
//        memset(uart4_rx_buffer, 0, BUFF_SIZE);
//        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
//    }//huart->Instance == UART5 || huart->Instance == UART7

}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fd81 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f8a3 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f9cd 	bl	80008e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800054a:	f000 f99b 	bl	8000884 <MX_DMA_Init>
  MX_UART4_Init();
 800054e:	f000 f91b 	bl	8000788 <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 8000552:	f008 f8ff 	bl	8008754 <MX_USB_DEVICE_Init>
  MX_UART5_Init();
 8000556:	f000 f941 	bl	80007dc <MX_UART5_Init>
  MX_UART7_Init();
 800055a:	f000 f969 	bl	8000830 <MX_UART7_Init>
  MX_CRC_Init();
 800055e:	f000 f8ff 	bl	8000760 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, uart4_rx_buffer, BUFF_SIZE);
 8000562:	2240      	movs	r2, #64	@ 0x40
 8000564:	493b      	ldr	r1, [pc, #236]	@ (8000654 <main+0x11c>)
 8000566:	483c      	ldr	r0, [pc, #240]	@ (8000658 <main+0x120>)
 8000568:	f003 fcd7 	bl	8003f1a <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, uart5_rx_buffer, BUFF_SIZE);
 800056c:	2240      	movs	r2, #64	@ 0x40
 800056e:	493b      	ldr	r1, [pc, #236]	@ (800065c <main+0x124>)
 8000570:	483b      	ldr	r0, [pc, #236]	@ (8000660 <main+0x128>)
 8000572:	f003 fcd2 	bl	8003f1a <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, uart7_rx_buffer, BUFF_SIZE);
 8000576:	2240      	movs	r2, #64	@ 0x40
 8000578:	493a      	ldr	r1, [pc, #232]	@ (8000664 <main+0x12c>)
 800057a:	483b      	ldr	r0, [pc, #236]	@ (8000668 <main+0x130>)
 800057c:	f003 fccd 	bl	8003f1a <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE BEGIN WHILE */
  static const uint8_t header[HEADER_SIZE] = {0x02, 0x04};  // Packet Header

  while (1)
  {
	  count++;
 8000580:	4b3a      	ldr	r3, [pc, #232]	@ (800066c <main+0x134>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a39      	ldr	r2, [pc, #228]	@ (800066c <main+0x134>)
 8000588:	6013      	str	r3, [r2, #0]
	     if (count%10000000==0) {
 800058a:	4b38      	ldr	r3, [pc, #224]	@ (800066c <main+0x134>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	4b38      	ldr	r3, [pc, #224]	@ (8000670 <main+0x138>)
 8000590:	fba3 1302 	umull	r1, r3, r3, r2
 8000594:	0d9b      	lsrs	r3, r3, #22
 8000596:	4937      	ldr	r1, [pc, #220]	@ (8000674 <main+0x13c>)
 8000598:	fb01 f303 	mul.w	r3, r1, r3
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1ee      	bne.n	8000580 <main+0x48>
	         HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005a2:	2180      	movs	r1, #128	@ 0x80
 80005a4:	4834      	ldr	r0, [pc, #208]	@ (8000678 <main+0x140>)
 80005a6:	f001 fcd8 	bl	8001f5a <HAL_GPIO_TogglePin>
	         uint8_t *rx_buffer;
	         uint8_t *udma_buffer;
	         uint16_t *rx_size;


	         uint8_t hello[]={0x48,0x47,0x43,0x59,0x49,0x54,0};
 80005aa:	4a34      	ldr	r2, [pc, #208]	@ (800067c <main+0x144>)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b2:	6018      	str	r0, [r3, #0]
 80005b4:	3304      	adds	r3, #4
 80005b6:	8019      	strh	r1, [r3, #0]
 80005b8:	3302      	adds	r3, #2
 80005ba:	0c0a      	lsrs	r2, r1, #16
 80005bc:	701a      	strb	r2, [r3, #0]
	         uint16_t size=sizeof(hello)-1;
 80005be:	2306      	movs	r3, #6
 80005c0:	807b      	strh	r3, [r7, #2]
	         uint8_t Size=size;
 80005c2:	887b      	ldrh	r3, [r7, #2]
 80005c4:	75fb      	strb	r3, [r7, #23]
	         rx_size=&size;
 80005c6:	1cbb      	adds	r3, r7, #2
 80005c8:	613b      	str	r3, [r7, #16]
	         memcpy(rx_buffer,hello,sizeof(hello)-1);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2206      	movs	r2, #6
 80005ce:	4619      	mov	r1, r3
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	f008 fe13 	bl	80091fc <memcpy>
//	         HAL_UARTEx_ReceiveToIdle_DMA(huart4, rx_buffer, BUFF_SIZE);
//	         memset(udma_buffer, 0, BUFF_SIZE);
//	         memcpy(udma_buffer, rx_buffer, Size);
//	         __HAL_DMA_DISABLE_IT(huart == &huart5 ? &hdma_uart5_rx : &hdma_uart7_rx, DMA_IT_HT);
	         *rx_size = Size;
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	b29a      	uxth	r2, r3
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	801a      	strh	r2, [r3, #0]

	         // packet

	         memcpy(&full_packet, header,sizeof(header));
 80005de:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <main+0x148>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b28      	ldr	r3, [pc, #160]	@ (8000684 <main+0x14c>)
 80005e4:	801a      	strh	r2, [r3, #0]
	 //        memcpy(&full_packet[sizeof(header)], rx_size, sizeof(*rx_size));
	         full_packet[sizeof(header)]   =   (uint8_t)((*rx_size));
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <main+0x14c>)
 80005ee:	709a      	strb	r2, [r3, #2]
	         full_packet[sizeof(header)+1] =(uint8_t)((*rx_size)<<8u);
 80005f0:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <main+0x14c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	70da      	strb	r2, [r3, #3]
	         memcpy(&full_packet[sizeof(header)+sizeof(*rx_size)],  hello, *rx_size);
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	461a      	mov	r2, r3
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	4619      	mov	r1, r3
 8000600:	4821      	ldr	r0, [pc, #132]	@ (8000688 <main+0x150>)
 8000602:	f008 fdfb 	bl	80091fc <memcpy>

	         uint8_t temp = Calculate_Checksum(full_packet, HEADER_SIZE + sizeof(*rx_size) +  *rx_size );
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	3304      	adds	r3, #4
 800060c:	b29b      	uxth	r3, r3
 800060e:	4619      	mov	r1, r3
 8000610:	481c      	ldr	r0, [pc, #112]	@ (8000684 <main+0x14c>)
 8000612:	f7ff ff63 	bl	80004dc <Calculate_Checksum>
 8000616:	4603      	mov	r3, r0
 8000618:	72fb      	strb	r3, [r7, #11]
	         full_packet[HEADER_SIZE + sizeof(*rx_size) +  *rx_size] = temp;
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	3304      	adds	r3, #4
 8000620:	4918      	ldr	r1, [pc, #96]	@ (8000684 <main+0x14c>)
 8000622:	7afa      	ldrb	r2, [r7, #11]
 8000624:	54ca      	strb	r2, [r1, r3]
	         volatile uint8_t test= HEADER_SIZE + sizeof(*rx_size) +  *rx_size;
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	3304      	adds	r3, #4
 800062e:	b2db      	uxtb	r3, r3
 8000630:	707b      	strb	r3, [r7, #1]
	         full_packet[test+1]=0;
 8000632:	787b      	ldrb	r3, [r7, #1]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	3301      	adds	r3, #1
 8000638:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <main+0x14c>)
 800063a:	2100      	movs	r1, #0
 800063c:	54d1      	strb	r1, [r2, r3]
	         HAL_UART_Transmit(&huart4, full_packet,test+1, HAL_MAX_DELAY);
 800063e:	787b      	ldrb	r3, [r7, #1]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	3301      	adds	r3, #1
 8000644:	b29a      	uxth	r2, r3
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	490e      	ldr	r1, [pc, #56]	@ (8000684 <main+0x14c>)
 800064c:	4802      	ldr	r0, [pc, #8]	@ (8000658 <main+0x120>)
 800064e:	f003 fbd9 	bl	8003e04 <HAL_UART_Transmit>
	  count++;
 8000652:	e795      	b.n	8000580 <main+0x48>
 8000654:	20000360 	.word	0x20000360
 8000658:	20000120 	.word	0x20000120
 800065c:	200003a0 	.word	0x200003a0
 8000660:	20000168 	.word	0x20000168
 8000664:	200003e0 	.word	0x200003e0
 8000668:	200001b0 	.word	0x200001b0
 800066c:	200004a0 	.word	0x200004a0
 8000670:	6b5fca6b 	.word	0x6b5fca6b
 8000674:	00989680 	.word	0x00989680
 8000678:	40020400 	.word	0x40020400
 800067c:	08009230 	.word	0x08009230
 8000680:	08009268 	.word	0x08009268
 8000684:	20000420 	.word	0x20000420
 8000688:	20000424 	.word	0x20000424

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	@ 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	@ 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f008 fd82 	bl	80091a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	@ (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	@ (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	@ (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000700:	23a8      	movs	r3, #168	@ 0xa8
 8000702:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000708:	2307      	movs	r3, #7
 800070a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fe8f 	bl	8003434 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 fa08 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f003 f8f0 	bl	8003924 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074a:	f000 f9f1 	bl	8000b30 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_CRC_Init+0x20>)
 8000766:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <MX_CRC_Init+0x24>)
 8000768:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_CRC_Init+0x20>)
 800076c:	f000 fe11 	bl	8001392 <HAL_CRC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000776:	f000 f9db 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000118 	.word	0x20000118
 8000784:	40023000 	.word	0x40023000

08000788 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_UART4_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <MX_UART4_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_UART4_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_UART4_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_UART4_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <MX_UART4_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_UART4_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <MX_UART4_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_UART4_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_UART4_Init+0x4c>)
 80007c0:	f003 fad0 	bl	8003d64 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f9b1 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000120 	.word	0x20000120
 80007d8:	40004c00 	.word	0x40004c00

080007dc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_UART5_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <MX_UART5_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_UART5_Init+0x4c>)
 80007e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007ec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_UART5_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_UART5_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_UART5_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_UART5_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_UART5_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_UART5_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_UART5_Init+0x4c>)
 8000814:	f003 faa6 	bl	8003d64 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f987 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000168 	.word	0x20000168
 800082c:	40005000 	.word	0x40005000

08000830 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_UART7_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <MX_UART7_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <MX_UART7_Init+0x4c>)
 800083c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000840:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_UART7_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_UART7_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_UART7_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_UART7_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_UART7_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_UART7_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_UART7_Init+0x4c>)
 8000868:	f003 fa7c 	bl	8003d64 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f95d 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200001b0 	.word	0x200001b0
 8000880:	40007800 	.word	0x40007800

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_DMA_Init+0x5c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a13      	ldr	r2, [pc, #76]	@ (80008e0 <MX_DMA_Init+0x5c>)
 8000894:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_DMA_Init+0x5c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	200b      	movs	r0, #11
 80008ac:	f000 fd3b 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008b0:	200b      	movs	r0, #11
 80008b2:	f000 fd54 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	200d      	movs	r0, #13
 80008bc:	f000 fd33 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80008c0:	200d      	movs	r0, #13
 80008c2:	f000 fd4c 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	200e      	movs	r0, #14
 80008cc:	f000 fd2b 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008d0:	200e      	movs	r0, #14
 80008d2:	f000 fd44 	bl	800135e <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	@ 0x30
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b86      	ldr	r3, [pc, #536]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a85      	ldr	r2, [pc, #532]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b83      	ldr	r3, [pc, #524]	@ (8000b18 <MX_GPIO_Init+0x234>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b18 <MX_GPIO_Init+0x234>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a7e      	ldr	r2, [pc, #504]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b7c      	ldr	r3, [pc, #496]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b78      	ldr	r3, [pc, #480]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a77      	ldr	r2, [pc, #476]	@ (8000b18 <MX_GPIO_Init+0x234>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b75      	ldr	r3, [pc, #468]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b71      	ldr	r3, [pc, #452]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a70      	ldr	r2, [pc, #448]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b6e      	ldr	r3, [pc, #440]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b6a      	ldr	r3, [pc, #424]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a69      	ldr	r2, [pc, #420]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b67      	ldr	r3, [pc, #412]	@ (8000b18 <MX_GPIO_Init+0x234>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b63      	ldr	r3, [pc, #396]	@ (8000b18 <MX_GPIO_Init+0x234>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a62      	ldr	r2, [pc, #392]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b60      	ldr	r3, [pc, #384]	@ (8000b18 <MX_GPIO_Init+0x234>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b5c      	ldr	r3, [pc, #368]	@ (8000b18 <MX_GPIO_Init+0x234>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a5b      	ldr	r2, [pc, #364]	@ (8000b18 <MX_GPIO_Init+0x234>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b59      	ldr	r3, [pc, #356]	@ (8000b18 <MX_GPIO_Init+0x234>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2101      	movs	r1, #1
 80009c2:	4856      	ldr	r0, [pc, #344]	@ (8000b1c <MX_GPIO_Init+0x238>)
 80009c4:	f001 fab0 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009ce:	4854      	ldr	r0, [pc, #336]	@ (8000b20 <MX_GPIO_Init+0x23c>)
 80009d0:	f001 faaa 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2140      	movs	r1, #64	@ 0x40
 80009d8:	4852      	ldr	r0, [pc, #328]	@ (8000b24 <MX_GPIO_Init+0x240>)
 80009da:	f001 faa5 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4849      	ldr	r0, [pc, #292]	@ (8000b1c <MX_GPIO_Init+0x238>)
 80009f6:	f001 f8eb 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009fa:	2301      	movs	r3, #1
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4842      	ldr	r0, [pc, #264]	@ (8000b1c <MX_GPIO_Init+0x238>)
 8000a12:	f001 f8dd 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a16:	2332      	movs	r3, #50	@ 0x32
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a26:	230b      	movs	r3, #11
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	483a      	ldr	r0, [pc, #232]	@ (8000b1c <MX_GPIO_Init+0x238>)
 8000a32:	f001 f8cd 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a36:	2386      	movs	r3, #134	@ 0x86
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a46:	230b      	movs	r3, #11
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4835      	ldr	r0, [pc, #212]	@ (8000b28 <MX_GPIO_Init+0x244>)
 8000a52:	f001 f8bd 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a56:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	482c      	ldr	r0, [pc, #176]	@ (8000b20 <MX_GPIO_Init+0x23c>)
 8000a70:	f001 f8ae 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a86:	230b      	movs	r3, #11
 8000a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4823      	ldr	r0, [pc, #140]	@ (8000b20 <MX_GPIO_Init+0x23c>)
 8000a92:	f001 f89d 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481e      	ldr	r0, [pc, #120]	@ (8000b2c <MX_GPIO_Init+0x248>)
 8000ab4:	f001 f88c 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ab8:	2340      	movs	r3, #64	@ 0x40
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4815      	ldr	r0, [pc, #84]	@ (8000b24 <MX_GPIO_Init+0x240>)
 8000ad0:	f001 f87e 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480f      	ldr	r0, [pc, #60]	@ (8000b24 <MX_GPIO_Init+0x240>)
 8000ae8:	f001 f872 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aec:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000afe:	230b      	movs	r3, #11
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4806      	ldr	r0, [pc, #24]	@ (8000b24 <MX_GPIO_Init+0x240>)
 8000b0a:	f001 f861 	bl	8001bd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	@ 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40021800 	.word	0x40021800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020c00 	.word	0x40020c00

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <Error_Handler+0x8>

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc8 <HAL_CRC_MspInit+0x3c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d10d      	bne.n	8000bba <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_CRC_MspInit+0x40>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <HAL_CRC_MspInit+0x40>)
 8000ba8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <HAL_CRC_MspInit+0x40>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023000 	.word	0x40023000
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	@ 0x38
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a78      	ldr	r2, [pc, #480]	@ (8000dd0 <HAL_UART_MspInit+0x200>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d164      	bne.n	8000cbc <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
 8000bf6:	4b77      	ldr	r3, [pc, #476]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	4a76      	ldr	r2, [pc, #472]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000bfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c02:	4b74      	ldr	r3, [pc, #464]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c0a:	623b      	str	r3, [r7, #32]
 8000c0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	4b70      	ldr	r3, [pc, #448]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a6f      	ldr	r2, [pc, #444]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	4864      	ldr	r0, [pc, #400]	@ (8000dd8 <HAL_UART_MspInit+0x208>)
 8000c48:	f000 ffc2 	bl	8001bd0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000c4c:	4b63      	ldr	r3, [pc, #396]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000c4e:	4a64      	ldr	r2, [pc, #400]	@ (8000de0 <HAL_UART_MspInit+0x210>)
 8000c50:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000c52:	4b62      	ldr	r3, [pc, #392]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000c54:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c58:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c5a:	4b60      	ldr	r3, [pc, #384]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c60:	4b5e      	ldr	r3, [pc, #376]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c66:	4b5d      	ldr	r3, [pc, #372]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000c68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c6c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c74:	4b59      	ldr	r3, [pc, #356]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000c7a:	4b58      	ldr	r3, [pc, #352]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c80:	4b56      	ldr	r3, [pc, #344]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000c82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c86:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c88:	4b54      	ldr	r3, [pc, #336]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000c8e:	4853      	ldr	r0, [pc, #332]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000c90:	f000 fb9c 	bl	80013cc <HAL_DMA_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000c9a:	f7ff ff49 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a4e      	ldr	r2, [pc, #312]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ca4:	4a4d      	ldr	r2, [pc, #308]	@ (8000ddc <HAL_UART_MspInit+0x20c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2034      	movs	r0, #52	@ 0x34
 8000cb0:	f000 fb39 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000cb4:	2034      	movs	r0, #52	@ 0x34
 8000cb6:	f000 fb52 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8000cba:	e103      	b.n	8000ec4 <HAL_UART_MspInit+0x2f4>
  else if(huart->Instance==UART5)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a48      	ldr	r2, [pc, #288]	@ (8000de4 <HAL_UART_MspInit+0x214>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	f040 8096 	bne.w	8000df4 <HAL_UART_MspInit+0x224>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
 8000ccc:	4b41      	ldr	r3, [pc, #260]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	4a40      	ldr	r2, [pc, #256]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000cd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cec:	4a39      	ldr	r2, [pc, #228]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf4:	4b37      	ldr	r3, [pc, #220]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	4b33      	ldr	r3, [pc, #204]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d08:	4a32      	ldr	r2, [pc, #200]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000d0a:	f043 0308 	orr.w	r3, r3, #8
 8000d0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d10:	4b30      	ldr	r3, [pc, #192]	@ (8000dd4 <HAL_UART_MspInit+0x204>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d2e:	2308      	movs	r3, #8
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4827      	ldr	r0, [pc, #156]	@ (8000dd8 <HAL_UART_MspInit+0x208>)
 8000d3a:	f000 ff49 	bl	8001bd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4823      	ldr	r0, [pc, #140]	@ (8000de8 <HAL_UART_MspInit+0x218>)
 8000d5a:	f000 ff39 	bl	8001bd0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000d60:	4a23      	ldr	r2, [pc, #140]	@ (8000df0 <HAL_UART_MspInit+0x220>)
 8000d62:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000d64:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000d66:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d6a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000d7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d7e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000d94:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d98:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000da0:	4812      	ldr	r0, [pc, #72]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000da2:	f000 fb13 	bl	80013cc <HAL_DMA_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8000dac:	f7ff fec0 	bl	8000b30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a0e      	ldr	r2, [pc, #56]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000db4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000db6:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <HAL_UART_MspInit+0x21c>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2035      	movs	r0, #53	@ 0x35
 8000dc2:	f000 fab0 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000dc6:	2035      	movs	r0, #53	@ 0x35
 8000dc8:	f000 fac9 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 8000dcc:	e07a      	b.n	8000ec4 <HAL_UART_MspInit+0x2f4>
 8000dce:	bf00      	nop
 8000dd0:	40004c00 	.word	0x40004c00
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	200001f8 	.word	0x200001f8
 8000de0:	40026040 	.word	0x40026040
 8000de4:	40005000 	.word	0x40005000
 8000de8:	40020c00 	.word	0x40020c00
 8000dec:	20000258 	.word	0x20000258
 8000df0:	40026010 	.word	0x40026010
  else if(huart->Instance==UART7)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a34      	ldr	r2, [pc, #208]	@ (8000ecc <HAL_UART_MspInit+0x2fc>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d162      	bne.n	8000ec4 <HAL_UART_MspInit+0x2f4>
    __HAL_RCC_UART7_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b33      	ldr	r3, [pc, #204]	@ (8000ed0 <HAL_UART_MspInit+0x300>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a32      	ldr	r2, [pc, #200]	@ (8000ed0 <HAL_UART_MspInit+0x300>)
 8000e08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b30      	ldr	r3, [pc, #192]	@ (8000ed0 <HAL_UART_MspInit+0x300>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed0 <HAL_UART_MspInit+0x300>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a2b      	ldr	r2, [pc, #172]	@ (8000ed0 <HAL_UART_MspInit+0x300>)
 8000e24:	f043 0320 	orr.w	r3, r3, #32
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <HAL_UART_MspInit+0x300>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0320 	and.w	r3, r3, #32
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e36:	23c0      	movs	r3, #192	@ 0xc0
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000e46:	2308      	movs	r3, #8
 8000e48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4820      	ldr	r0, [pc, #128]	@ (8000ed4 <HAL_UART_MspInit+0x304>)
 8000e52:	f000 febd 	bl	8001bd0 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8000e56:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000e58:	4a20      	ldr	r2, [pc, #128]	@ (8000edc <HAL_UART_MspInit+0x30c>)
 8000e5a:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000e5e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8000e62:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000e72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e76:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e78:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8000e84:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000e8c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e90:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8000e98:	480f      	ldr	r0, [pc, #60]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000e9a:	f000 fa97 	bl	80013cc <HAL_DMA_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 8000ea4:	f7ff fe44 	bl	8000b30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000eac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_UART_MspInit+0x308>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2052      	movs	r0, #82	@ 0x52
 8000eba:	f000 fa34 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000ebe:	2052      	movs	r0, #82	@ 0x52
 8000ec0:	f000 fa4d 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 8000ec4:	bf00      	nop
 8000ec6:	3738      	adds	r7, #56	@ 0x38
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40007800 	.word	0x40007800
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	200002b8 	.word	0x200002b8
 8000edc:	40026058 	.word	0x40026058

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f36:	f000 f8d7 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <DMA1_Stream0_IRQHandler+0x10>)
 8000f46:	f000 fbd9 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000258 	.word	0x20000258

08000f54 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <DMA1_Stream2_IRQHandler+0x10>)
 8000f5a:	f000 fbcf 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200001f8 	.word	0x200001f8

08000f68 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <DMA1_Stream3_IRQHandler+0x10>)
 8000f6e:	f000 fbc5 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200002b8 	.word	0x200002b8

08000f7c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <UART4_IRQHandler+0x10>)
 8000f82:	f003 f827 	bl	8003fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000120 	.word	0x20000120

08000f90 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <UART5_IRQHandler+0x10>)
 8000f96:	f003 f81d 	bl	8003fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000168 	.word	0x20000168

08000fa4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <OTG_FS_IRQHandler+0x10>)
 8000faa:	f001 f934 	bl	8002216 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20001988 	.word	0x20001988

08000fb8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <UART7_IRQHandler+0x10>)
 8000fbe:	f003 f809 	bl	8003fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001b0 	.word	0x200001b0

08000fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001028 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff4:	f7ff ffea 	bl	8000fcc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	@ (8001030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	@ (800103c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800101e:	f008 f8c9 	bl	80091b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001022:	f7ff fa89 	bl	8000538 <main>
  bx  lr    
 8001026:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001028:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001034:	0800929c 	.word	0x0800929c
  ldr r2, =_sbss
 8001038:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800103c:	2000208c 	.word	0x2000208c

08001040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001048:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <HAL_Init+0x40>)
 800104e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <HAL_Init+0x40>)
 800105a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800105e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <HAL_Init+0x40>)
 8001066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800106a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f94f 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	2000      	movs	r0, #0
 8001074:	f000 f808 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fd60 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023c00 	.word	0x40023c00

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f967 	bl	800137a <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f92f 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	@ (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000004 	.word	0x20000004

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	200004a4 	.word	0x200004a4

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200004a4 	.word	0x200004a4

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	@ (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	@ (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	@ (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	@ 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff8e 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff29 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff3e 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff8e 	bl	8001264 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff31 	bl	80011d4 <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e00e      	b.n	80013c2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	795b      	ldrb	r3, [r3, #5]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fbe9 	bl	8000b8c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fe9a 	bl	8001110 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e099      	b.n	800151c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001408:	e00f      	b.n	800142a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800140a:	f7ff fe81 	bl	8001110 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b05      	cmp	r3, #5
 8001416:	d908      	bls.n	800142a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2220      	movs	r2, #32
 800141c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e078      	b.n	800151c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1e8      	bne.n	800140a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4b38      	ldr	r3, [pc, #224]	@ (8001524 <HAL_DMA_Init+0x158>)
 8001444:	4013      	ands	r3, r2
 8001446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4313      	orrs	r3, r2
 800147a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001480:	2b04      	cmp	r3, #4
 8001482:	d107      	bne.n	8001494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	4313      	orrs	r3, r2
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4313      	orrs	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f023 0307 	bic.w	r3, r3, #7
 80014aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d117      	bne.n	80014ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00e      	beq.n	80014ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fb01 	bl	8001ad8 <DMA_CheckFifoParam>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2240      	movs	r2, #64	@ 0x40
 80014e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80014ea:	2301      	movs	r3, #1
 80014ec:	e016      	b.n	800151c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fab8 	bl	8001a6c <DMA_CalcBaseAndBitshift>
 80014fc:	4603      	mov	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001504:	223f      	movs	r2, #63	@ 0x3f
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	f010803f 	.word	0xf010803f

08001528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_DMA_Start_IT+0x26>
 800154a:	2302      	movs	r3, #2
 800154c:	e040      	b.n	80015d0 <HAL_DMA_Start_IT+0xa8>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d12f      	bne.n	80015c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2202      	movs	r2, #2
 8001566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fa4a 	bl	8001a10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001580:	223f      	movs	r2, #63	@ 0x3f
 8001582:	409a      	lsls	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0216 	orr.w	r2, r2, #22
 8001596:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0208 	orr.w	r2, r2, #8
 80015ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e005      	b.n	80015ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015ca:	2302      	movs	r3, #2
 80015cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015e6:	f7ff fd93 	bl	8001110 <HAL_GetTick>
 80015ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d008      	beq.n	800160a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e052      	b.n	80016b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0216 	bic.w	r2, r2, #22
 8001618:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001628:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d103      	bne.n	800163a <HAL_DMA_Abort+0x62>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0208 	bic.w	r2, r2, #8
 8001648:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165a:	e013      	b.n	8001684 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165c:	f7ff fd58 	bl	8001110 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b05      	cmp	r3, #5
 8001668:	d90c      	bls.n	8001684 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2220      	movs	r2, #32
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2203      	movs	r2, #3
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e015      	b.n	80016b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1e4      	bne.n	800165c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001696:	223f      	movs	r2, #63	@ 0x3f
 8001698:	409a      	lsls	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d004      	beq.n	80016d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2280      	movs	r2, #128	@ 0x80
 80016d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00c      	b.n	80016f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2205      	movs	r2, #5
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001708:	4b8e      	ldr	r3, [pc, #568]	@ (8001944 <HAL_DMA_IRQHandler+0x248>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a8e      	ldr	r2, [pc, #568]	@ (8001948 <HAL_DMA_IRQHandler+0x24c>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0a9b      	lsrs	r3, r3, #10
 8001714:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001726:	2208      	movs	r2, #8
 8001728:	409a      	lsls	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01a      	beq.n	8001768 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d013      	beq.n	8001768 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0204 	bic.w	r2, r2, #4
 800174e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001754:	2208      	movs	r2, #8
 8001756:	409a      	lsls	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176c:	2201      	movs	r2, #1
 800176e:	409a      	lsls	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d012      	beq.n	800179e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178a:	2201      	movs	r2, #1
 800178c:	409a      	lsls	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001796:	f043 0202 	orr.w	r2, r3, #2
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a2:	2204      	movs	r2, #4
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d012      	beq.n	80017d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00b      	beq.n	80017d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c0:	2204      	movs	r2, #4
 80017c2:	409a      	lsls	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017cc:	f043 0204 	orr.w	r2, r3, #4
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d8:	2210      	movs	r2, #16
 80017da:	409a      	lsls	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d043      	beq.n	800186c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d03c      	beq.n	800186c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f6:	2210      	movs	r2, #16
 80017f8:	409a      	lsls	r2, r3
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d018      	beq.n	800183e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d108      	bne.n	800182c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d024      	beq.n	800186c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
 800182a:	e01f      	b.n	800186c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01b      	beq.n	800186c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
 800183c:	e016      	b.n	800186c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d107      	bne.n	800185c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0208 	bic.w	r2, r2, #8
 800185a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001870:	2220      	movs	r2, #32
 8001872:	409a      	lsls	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 808f 	beq.w	800199c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8087 	beq.w	800199c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001892:	2220      	movs	r2, #32
 8001894:	409a      	lsls	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d136      	bne.n	8001914 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0216 	bic.w	r2, r2, #22
 80018b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695a      	ldr	r2, [r3, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d103      	bne.n	80018d6 <HAL_DMA_IRQHandler+0x1da>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0208 	bic.w	r2, r2, #8
 80018e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ea:	223f      	movs	r2, #63	@ 0x3f
 80018ec:	409a      	lsls	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001906:	2b00      	cmp	r3, #0
 8001908:	d07e      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	4798      	blx	r3
        }
        return;
 8001912:	e079      	b.n	8001a08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d01d      	beq.n	800195e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10d      	bne.n	800194c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001934:	2b00      	cmp	r3, #0
 8001936:	d031      	beq.n	800199c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	4798      	blx	r3
 8001940:	e02c      	b.n	800199c <HAL_DMA_IRQHandler+0x2a0>
 8001942:	bf00      	nop
 8001944:	20000000 	.word	0x20000000
 8001948:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001950:	2b00      	cmp	r3, #0
 8001952:	d023      	beq.n	800199c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	4798      	blx	r3
 800195c:	e01e      	b.n	800199c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10f      	bne.n	800198c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0210 	bic.w	r2, r2, #16
 800197a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d032      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d022      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2205      	movs	r2, #5
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3301      	adds	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d307      	bcc.n	80019e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f2      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x2cc>
 80019e2:	e000      	b.n	80019e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
 8001a06:	e000      	b.n	8001a0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a08:	bf00      	nop
    }
  }
}
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b40      	cmp	r3, #64	@ 0x40
 8001a3c:	d108      	bne.n	8001a50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a4e:	e007      	b.n	8001a60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	60da      	str	r2, [r3, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	3b10      	subs	r3, #16
 8001a7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ad0 <DMA_CalcBaseAndBitshift+0x64>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a86:	4a13      	ldr	r2, [pc, #76]	@ (8001ad4 <DMA_CalcBaseAndBitshift+0x68>)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d909      	bls.n	8001aae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001aa2:	f023 0303 	bic.w	r3, r3, #3
 8001aa6:	1d1a      	adds	r2, r3, #4
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	659a      	str	r2, [r3, #88]	@ 0x58
 8001aac:	e007      	b.n	8001abe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	aaaaaaab 	.word	0xaaaaaaab
 8001ad4:	08009284 	.word	0x08009284

08001ad8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d11f      	bne.n	8001b32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d856      	bhi.n	8001ba6 <DMA_CheckFifoParam+0xce>
 8001af8:	a201      	add	r2, pc, #4	@ (adr r2, 8001b00 <DMA_CheckFifoParam+0x28>)
 8001afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afe:	bf00      	nop
 8001b00:	08001b11 	.word	0x08001b11
 8001b04:	08001b23 	.word	0x08001b23
 8001b08:	08001b11 	.word	0x08001b11
 8001b0c:	08001ba7 	.word	0x08001ba7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d046      	beq.n	8001baa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b20:	e043      	b.n	8001baa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b2a:	d140      	bne.n	8001bae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b30:	e03d      	b.n	8001bae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b3a:	d121      	bne.n	8001b80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d837      	bhi.n	8001bb2 <DMA_CheckFifoParam+0xda>
 8001b42:	a201      	add	r2, pc, #4	@ (adr r2, 8001b48 <DMA_CheckFifoParam+0x70>)
 8001b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b48:	08001b59 	.word	0x08001b59
 8001b4c:	08001b5f 	.word	0x08001b5f
 8001b50:	08001b59 	.word	0x08001b59
 8001b54:	08001b71 	.word	0x08001b71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b5c:	e030      	b.n	8001bc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d025      	beq.n	8001bb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b6e:	e022      	b.n	8001bb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b78:	d11f      	bne.n	8001bba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b7e:	e01c      	b.n	8001bba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d903      	bls.n	8001b8e <DMA_CheckFifoParam+0xb6>
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d003      	beq.n	8001b94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b8c:	e018      	b.n	8001bc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
      break;
 8001b92:	e015      	b.n	8001bc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00e      	beq.n	8001bbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba4:	e00b      	b.n	8001bbe <DMA_CheckFifoParam+0xe6>
      break;
 8001ba6:	bf00      	nop
 8001ba8:	e00a      	b.n	8001bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001baa:	bf00      	nop
 8001bac:	e008      	b.n	8001bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bae:	bf00      	nop
 8001bb0:	e006      	b.n	8001bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bb2:	bf00      	nop
 8001bb4:	e004      	b.n	8001bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bb6:	bf00      	nop
 8001bb8:	e002      	b.n	8001bc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bba:	bf00      	nop
 8001bbc:	e000      	b.n	8001bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bbe:	bf00      	nop
    }
  } 
  
  return status; 
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop

08001bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	@ 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	e177      	b.n	8001edc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	f040 8166 	bne.w	8001ed6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d005      	beq.n	8001c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d130      	bne.n	8001c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c58:	2201      	movs	r2, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 0201 	and.w	r2, r3, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d017      	beq.n	8001cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d123      	bne.n	8001d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	08da      	lsrs	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3208      	adds	r2, #8
 8001cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	08da      	lsrs	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3208      	adds	r2, #8
 8001d0e:	69b9      	ldr	r1, [r7, #24]
 8001d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0203 	and.w	r2, r3, #3
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80c0 	beq.w	8001ed6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b66      	ldr	r3, [pc, #408]	@ (8001ef4 <HAL_GPIO_Init+0x324>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	4a65      	ldr	r2, [pc, #404]	@ (8001ef4 <HAL_GPIO_Init+0x324>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d66:	4b63      	ldr	r3, [pc, #396]	@ (8001ef4 <HAL_GPIO_Init+0x324>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d72:	4a61      	ldr	r2, [pc, #388]	@ (8001ef8 <HAL_GPIO_Init+0x328>)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a58      	ldr	r2, [pc, #352]	@ (8001efc <HAL_GPIO_Init+0x32c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d037      	beq.n	8001e0e <HAL_GPIO_Init+0x23e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a57      	ldr	r2, [pc, #348]	@ (8001f00 <HAL_GPIO_Init+0x330>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d031      	beq.n	8001e0a <HAL_GPIO_Init+0x23a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a56      	ldr	r2, [pc, #344]	@ (8001f04 <HAL_GPIO_Init+0x334>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d02b      	beq.n	8001e06 <HAL_GPIO_Init+0x236>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a55      	ldr	r2, [pc, #340]	@ (8001f08 <HAL_GPIO_Init+0x338>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d025      	beq.n	8001e02 <HAL_GPIO_Init+0x232>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a54      	ldr	r2, [pc, #336]	@ (8001f0c <HAL_GPIO_Init+0x33c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01f      	beq.n	8001dfe <HAL_GPIO_Init+0x22e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a53      	ldr	r2, [pc, #332]	@ (8001f10 <HAL_GPIO_Init+0x340>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d019      	beq.n	8001dfa <HAL_GPIO_Init+0x22a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	@ (8001f14 <HAL_GPIO_Init+0x344>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0x226>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a51      	ldr	r2, [pc, #324]	@ (8001f18 <HAL_GPIO_Init+0x348>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00d      	beq.n	8001df2 <HAL_GPIO_Init+0x222>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a50      	ldr	r2, [pc, #320]	@ (8001f1c <HAL_GPIO_Init+0x34c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d007      	beq.n	8001dee <HAL_GPIO_Init+0x21e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4f      	ldr	r2, [pc, #316]	@ (8001f20 <HAL_GPIO_Init+0x350>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_GPIO_Init+0x21a>
 8001de6:	2309      	movs	r3, #9
 8001de8:	e012      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dea:	230a      	movs	r3, #10
 8001dec:	e010      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dee:	2308      	movs	r3, #8
 8001df0:	e00e      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001df2:	2307      	movs	r3, #7
 8001df4:	e00c      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001df6:	2306      	movs	r3, #6
 8001df8:	e00a      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	e008      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dfe:	2304      	movs	r3, #4
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e02:	2303      	movs	r3, #3
 8001e04:	e004      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f002 0203 	and.w	r2, r2, #3
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	4093      	lsls	r3, r2
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e20:	4935      	ldr	r1, [pc, #212]	@ (8001ef8 <HAL_GPIO_Init+0x328>)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <HAL_GPIO_Init+0x354>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e52:	4a34      	ldr	r2, [pc, #208]	@ (8001f24 <HAL_GPIO_Init+0x354>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e58:	4b32      	ldr	r3, [pc, #200]	@ (8001f24 <HAL_GPIO_Init+0x354>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e7c:	4a29      	ldr	r2, [pc, #164]	@ (8001f24 <HAL_GPIO_Init+0x354>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e82:	4b28      	ldr	r3, [pc, #160]	@ (8001f24 <HAL_GPIO_Init+0x354>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f24 <HAL_GPIO_Init+0x354>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eac:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <HAL_GPIO_Init+0x354>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed0:	4a14      	ldr	r2, [pc, #80]	@ (8001f24 <HAL_GPIO_Init+0x354>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	f67f ae84 	bls.w	8001bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40021400 	.word	0x40021400
 8001f14:	40021800 	.word	0x40021800
 8001f18:	40021c00 	.word	0x40021c00
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	40022400 	.word	0x40022400
 8001f24:	40013c00 	.word	0x40013c00

08001f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
 8001f34:	4613      	mov	r3, r2
 8001f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f38:	787b      	ldrb	r3, [r7, #1]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f44:	e003      	b.n	8001f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	041a      	lsls	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	619a      	str	r2, [r3, #24]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f6c:	887a      	ldrh	r2, [r7, #2]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4013      	ands	r3, r2
 8001f72:	041a      	lsls	r2, r3, #16
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af02      	add	r7, sp, #8
 8001f94:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e101      	b.n	80021a4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f006 fdd0 	bl	8008b60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fce:	d102      	bne.n	8001fd6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 f9f7 	bl	80053ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7c1a      	ldrb	r2, [r3, #16]
 8001fe8:	f88d 2000 	strb.w	r2, [sp]
 8001fec:	3304      	adds	r3, #4
 8001fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff0:	f003 f8d6 	bl	80051a0 <USB_CoreInit>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0ce      	b.n	80021a4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f003 f9ef 	bl	80053f0 <USB_SetCurrentMode>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0bf      	b.n	80021a4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	e04a      	b.n	80020c0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3315      	adds	r3, #21
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3314      	adds	r3, #20
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	b298      	uxth	r0, r3
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	332e      	adds	r3, #46	@ 0x2e
 8002066:	4602      	mov	r2, r0
 8002068:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3318      	adds	r3, #24
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	331c      	adds	r3, #28
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3320      	adds	r3, #32
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3324      	adds	r3, #36	@ 0x24
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	3301      	adds	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	791b      	ldrb	r3, [r3, #4]
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d3af      	bcc.n	800202a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	e044      	b.n	800215a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	3301      	adds	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	791b      	ldrb	r3, [r3, #4]
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	429a      	cmp	r2, r3
 8002162:	d3b5      	bcc.n	80020d0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7c1a      	ldrb	r2, [r3, #16]
 800216c:	f88d 2000 	strb.w	r2, [sp]
 8002170:	3304      	adds	r3, #4
 8002172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002174:	f003 f988 	bl	8005488 <USB_DevInit>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00c      	b.n	80021a4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f004 f9d2 	bl	8006546 <USB_DevDisconnect>

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_PCD_Start+0x1c>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e022      	b.n	800220e <HAL_PCD_Start+0x62>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 f8d9 	bl	80053ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 f980 	bl	8006504 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002216:	b590      	push	{r4, r7, lr}
 8002218:	b08d      	sub	sp, #52	@ 0x34
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fa3e 	bl	80066ae <USB_GetMode>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	f040 848c 	bne.w	8002b52 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f004 f9a2 	bl	8006588 <USB_ReadInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8482 	beq.w	8002b50 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f004 f98f 	bl	8006588 <USB_ReadInterrupts>
 800226a:	4603      	mov	r3, r0
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b02      	cmp	r3, #2
 8002272:	d107      	bne.n	8002284 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f002 0202 	and.w	r2, r2, #2
 8002282:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f004 f97d 	bl	8006588 <USB_ReadInterrupts>
 800228e:	4603      	mov	r3, r0
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b10      	cmp	r3, #16
 8002296:	d161      	bne.n	800235c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0210 	bic.w	r2, r2, #16
 80022a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	f003 020f 	and.w	r2, r3, #15
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	3304      	adds	r3, #4
 80022c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	0c5b      	lsrs	r3, r3, #17
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d124      	bne.n	800231e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d035      	beq.n	800234c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	6a38      	ldr	r0, [r7, #32]
 80022f4:	f003 ffb4 	bl	8006260 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002304:	441a      	add	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002316:	441a      	add	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	615a      	str	r2, [r3, #20]
 800231c:	e016      	b.n	800234c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	0c5b      	lsrs	r3, r3, #17
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	2b06      	cmp	r3, #6
 8002328:	d110      	bne.n	800234c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002330:	2208      	movs	r2, #8
 8002332:	4619      	mov	r1, r3
 8002334:	6a38      	ldr	r0, [r7, #32]
 8002336:	f003 ff93 	bl	8006260 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002346:	441a      	add	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0210 	orr.w	r2, r2, #16
 800235a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f004 f911 	bl	8006588 <USB_ReadInterrupts>
 8002366:	4603      	mov	r3, r0
 8002368:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800236c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002370:	f040 80a7 	bne.w	80024c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f004 f916 	bl	80065ae <USB_ReadDevAllOutEpInterrupt>
 8002382:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002384:	e099      	b.n	80024ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 808e 	beq.w	80024ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f004 f93a 	bl	8006616 <USB_ReadDevOutEPInterrupt>
 80023a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00c      	beq.n	80023c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ba:	461a      	mov	r2, r3
 80023bc:	2301      	movs	r3, #1
 80023be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fea4 	bl	8003110 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00c      	beq.n	80023ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023de:	461a      	mov	r2, r3
 80023e0:	2308      	movs	r3, #8
 80023e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 ff7a 	bl	80032e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002402:	461a      	mov	r2, r3
 8002404:	2310      	movs	r3, #16
 8002406:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d030      	beq.n	8002474 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241a:	2b80      	cmp	r3, #128	@ 0x80
 800241c:	d109      	bne.n	8002432 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800242c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002430:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	3304      	adds	r3, #4
 8002446:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	78db      	ldrb	r3, [r3, #3]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d108      	bne.n	8002462 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2200      	movs	r2, #0
 8002454:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4619      	mov	r1, r3
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f006 fc93 	bl	8008d88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800246e:	461a      	mov	r2, r3
 8002470:	2302      	movs	r3, #2
 8002472:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800248a:	461a      	mov	r2, r3
 800248c:	2320      	movs	r3, #32
 800248e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024a6:	461a      	mov	r2, r3
 80024a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	3301      	adds	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80024b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f47f af62 	bne.w	8002386 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 f85e 	bl	8006588 <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80024d6:	f040 80db 	bne.w	8002690 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 f87f 	bl	80065e2 <USB_ReadDevAllInEpInterrupt>
 80024e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80024ea:	e0cd      	b.n	8002688 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80c2 	beq.w	800267c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f004 f8a5 	bl	8006652 <USB_ReadDevInEPInterrupt>
 8002508:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d057      	beq.n	80025c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	2201      	movs	r2, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	69f9      	ldr	r1, [r7, #28]
 8002530:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002534:	4013      	ands	r3, r2
 8002536:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002544:	461a      	mov	r2, r3
 8002546:	2301      	movs	r3, #1
 8002548:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	799b      	ldrb	r3, [r3, #6]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d132      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3320      	adds	r3, #32
 8002562:	6819      	ldr	r1, [r3, #0]
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4403      	add	r3, r0
 8002572:	331c      	adds	r3, #28
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4419      	add	r1, r3
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4403      	add	r3, r0
 8002586:	3320      	adds	r3, #32
 8002588:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	2b00      	cmp	r3, #0
 800258e:	d113      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x3a2>
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	3324      	adds	r3, #36	@ 0x24
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025b0:	461a      	mov	r2, r3
 80025b2:	2101      	movs	r1, #1
 80025b4:	f004 f8ac 	bl	8006710 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4619      	mov	r1, r3
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f006 fb5d 	bl	8008c7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d008      	beq.n	80025e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025da:	461a      	mov	r2, r3
 80025dc:	2308      	movs	r3, #8
 80025de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025f6:	461a      	mov	r2, r3
 80025f8:	2310      	movs	r3, #16
 80025fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002612:	461a      	mov	r2, r3
 8002614:	2340      	movs	r3, #64	@ 0x40
 8002616:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d023      	beq.n	800266a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002622:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002624:	6a38      	ldr	r0, [r7, #32]
 8002626:	f003 f893 	bl	8005750 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800262a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	3310      	adds	r3, #16
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	3304      	adds	r3, #4
 800263c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	78db      	ldrb	r3, [r3, #3]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d108      	bne.n	8002658 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2200      	movs	r2, #0
 800264a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	b2db      	uxtb	r3, r3
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f006 fbaa 	bl	8008dac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	4413      	add	r3, r2
 8002660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002664:	461a      	mov	r2, r3
 8002666:	2302      	movs	r3, #2
 8002668:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002674:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fcbd 	bl	8002ff6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	3301      	adds	r3, #1
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268a:	2b00      	cmp	r3, #0
 800268c:	f47f af2e 	bne.w	80024ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f003 ff77 	bl	8006588 <USB_ReadInterrupts>
 800269a:	4603      	mov	r3, r0
 800269c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026a4:	d122      	bne.n	80026ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d108      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026cc:	2100      	movs	r1, #0
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fea4 	bl	800341c <HAL_PCDEx_LPM_Callback>
 80026d4:	e002      	b.n	80026dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f006 fb48 	bl	8008d6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80026ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f003 ff49 	bl	8006588 <USB_ReadInterrupts>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002700:	d112      	bne.n	8002728 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f006 fb04 	bl	8008d20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002726:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 ff2b 	bl	8006588 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800273c:	f040 80b7 	bne.w	80028ae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2110      	movs	r1, #16
 800275a:	4618      	mov	r0, r3
 800275c:	f002 fff8 	bl	8005750 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002764:	e046      	b.n	80027f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002772:	461a      	mov	r2, r3
 8002774:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002778:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800277a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4413      	add	r3, r2
 8002782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800278a:	0151      	lsls	r1, r2, #5
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	440a      	add	r2, r1
 8002790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002794:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002798:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800279a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027a6:	461a      	mov	r2, r3
 80027a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027be:	0151      	lsls	r1, r2, #5
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	440a      	add	r2, r1
 80027c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027de:	0151      	lsls	r1, r2, #5
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	440a      	add	r2, r1
 80027e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80027ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f0:	3301      	adds	r3, #1
 80027f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	791b      	ldrb	r3, [r3, #4]
 80027f8:	461a      	mov	r2, r3
 80027fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d3b2      	bcc.n	8002766 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800280e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002812:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7bdb      	ldrb	r3, [r3, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d016      	beq.n	800284a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800282c:	f043 030b 	orr.w	r3, r3, #11
 8002830:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002842:	f043 030b 	orr.w	r3, r3, #11
 8002846:	6453      	str	r3, [r2, #68]	@ 0x44
 8002848:	e015      	b.n	8002876 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002858:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800285c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002860:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002870:	f043 030b 	orr.w	r3, r3, #11
 8002874:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002884:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002888:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002898:	461a      	mov	r2, r3
 800289a:	f003 ff39 	bl	8006710 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80028ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 fe68 	bl	8006588 <USB_ReadInterrupts>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028c2:	d123      	bne.n	800290c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 fefe 	bl	80066ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 ffb5 	bl	8005842 <USB_GetDevSpeed>
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681c      	ldr	r4, [r3, #0]
 80028e4:	f001 fa0a 	bl	8003cfc <HAL_RCC_GetHCLKFreq>
 80028e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028ee:	461a      	mov	r2, r3
 80028f0:	4620      	mov	r0, r4
 80028f2:	f002 fcb9 	bl	8005268 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f006 f9e9 	bl	8008cce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800290a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f003 fe39 	bl	8006588 <USB_ReadInterrupts>
 8002916:	4603      	mov	r3, r0
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b08      	cmp	r3, #8
 800291e:	d10a      	bne.n	8002936 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f006 f9c6 	bl	8008cb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f002 0208 	and.w	r2, r2, #8
 8002934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f003 fe24 	bl	8006588 <USB_ReadInterrupts>
 8002940:	4603      	mov	r3, r0
 8002942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002946:	2b80      	cmp	r3, #128	@ 0x80
 8002948:	d123      	bne.n	8002992 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002956:	2301      	movs	r3, #1
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24
 800295a:	e014      	b.n	8002986 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d105      	bne.n	8002980 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fb0a 	bl	8002f94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	3301      	adds	r3, #1
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	791b      	ldrb	r3, [r3, #4]
 800298a:	461a      	mov	r2, r3
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	4293      	cmp	r3, r2
 8002990:	d3e4      	bcc.n	800295c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fdf6 	bl	8006588 <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029a6:	d13c      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a8:	2301      	movs	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ac:	e02b      	b.n	8002a06 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3318      	adds	r3, #24
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d115      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da12      	bge.n	8002a00 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3317      	adds	r3, #23
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	4619      	mov	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 faca 	bl	8002f94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	3301      	adds	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	791b      	ldrb	r3, [r3, #4]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d3cd      	bcc.n	80029ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fdae 	bl	8006588 <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a36:	d156      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a38:	2301      	movs	r3, #1
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3c:	e045      	b.n	8002aca <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d12e      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	da2b      	bge.n	8002ac4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002a78:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d121      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002abc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ac0:	6053      	str	r3, [r2, #4]
            break;
 8002ac2:	e008      	b.n	8002ad6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	791b      	ldrb	r3, [r3, #4]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d3b3      	bcc.n	8002a3e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 fd4c 	bl	8006588 <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002afa:	d10a      	bne.n	8002b12 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f006 f967 	bl	8008dd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 fd36 	bl	8006588 <USB_ReadInterrupts>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d115      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f006 f957 	bl	8008dec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	e000      	b.n	8002b52 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002b50:	bf00      	nop
    }
  }
}
 8002b52:	3734      	adds	r7, #52	@ 0x34
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}

08002b58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_PCD_SetAddress+0x1a>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e012      	b.n	8002b98 <HAL_PCD_SetAddress+0x40>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 fc95 	bl	80064b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	70fb      	strb	r3, [r7, #3]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	803b      	strh	r3, [r7, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	da0f      	bge.n	8002be6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	3310      	adds	r3, #16
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	3304      	adds	r3, #4
 8002bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	705a      	strb	r2, [r3, #1]
 8002be4:	e00f      	b.n	8002c06 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002c12:	883b      	ldrh	r3, [r7, #0]
 8002c14:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	78ba      	ldrb	r2, [r7, #2]
 8002c20:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d004      	beq.n	8002c34 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c34:	78bb      	ldrb	r3, [r7, #2]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d102      	bne.n	8002c40 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_PCD_EP_Open+0xae>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e00e      	b.n	8002c6c <HAL_PCD_EP_Open+0xcc>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f002 fe15 	bl	800588c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	da0f      	bge.n	8002ca8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	f003 020f 	and.w	r2, r3, #15
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	3310      	adds	r3, #16
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	705a      	strb	r2, [r3, #1]
 8002ca6:	e00f      	b.n	8002cc8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_PCD_EP_Close+0x6e>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e00e      	b.n	8002d00 <HAL_PCD_EP_Close+0x8c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f002 fe53 	bl	800599c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	460b      	mov	r3, r1
 8002d16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d18:	7afb      	ldrb	r3, [r7, #11]
 8002d1a:	f003 020f 	and.w	r2, r3, #15
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3304      	adds	r3, #4
 8002d30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2200      	movs	r2, #0
 8002d42:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2200      	movs	r2, #0
 8002d48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	799b      	ldrb	r3, [r3, #6]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d102      	bne.n	8002d64 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	799b      	ldrb	r3, [r3, #6]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6979      	ldr	r1, [r7, #20]
 8002d70:	f002 fef0 	bl	8005b54 <USB_EPStartXfer>

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	460b      	mov	r3, r1
 8002d88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	f003 020f 	and.w	r2, r3, #15
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002da0:	681b      	ldr	r3, [r3, #0]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dbe:	7afb      	ldrb	r3, [r7, #11]
 8002dc0:	f003 020f 	and.w	r2, r3, #15
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	3310      	adds	r3, #16
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2201      	movs	r2, #1
 8002dec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dee:	7afb      	ldrb	r3, [r7, #11]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	799b      	ldrb	r3, [r3, #6]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	799b      	ldrb	r3, [r3, #6]
 8002e10:	461a      	mov	r2, r3
 8002e12:	6979      	ldr	r1, [r7, #20]
 8002e14:	f002 fe9e 	bl	8005b54 <USB_EPStartXfer>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	7912      	ldrb	r2, [r2, #4]
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e04f      	b.n	8002ee0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	da0f      	bge.n	8002e68 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	f003 020f 	and.w	r2, r3, #15
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	3310      	adds	r3, #16
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	705a      	strb	r2, [r3, #1]
 8002e66:	e00d      	b.n	8002e84 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_PCD_EP_SetStall+0x82>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e01d      	b.n	8002ee0 <HAL_PCD_EP_SetStall+0xbe>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68f9      	ldr	r1, [r7, #12]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 fa2c 	bl	8006310 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7999      	ldrb	r1, [r3, #6]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f003 fc1d 	bl	8006710 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	7912      	ldrb	r2, [r2, #4]
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e042      	b.n	8002f8c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	da0f      	bge.n	8002f2e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3310      	adds	r3, #16
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	3304      	adds	r3, #4
 8002f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	705a      	strb	r2, [r3, #1]
 8002f2c:	e00f      	b.n	8002f4e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	f003 020f 	and.w	r2, r3, #15
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	3304      	adds	r3, #4
 8002f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_PCD_EP_ClrStall+0x86>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e00e      	b.n	8002f8c <HAL_PCD_EP_ClrStall+0xa4>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68f9      	ldr	r1, [r7, #12]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fa35 	bl	80063ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	da0c      	bge.n	8002fc2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 020f 	and.w	r2, r3, #15
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	3310      	adds	r3, #16
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4413      	add	r3, r2
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e00c      	b.n	8002fdc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f003 020f 	and.w	r2, r3, #15
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3304      	adds	r3, #4
 8002fda:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68f9      	ldr	r1, [r7, #12]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 f854 	bl	8006090 <USB_EPStopXfer>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002fec:	7afb      	ldrb	r3, [r7, #11]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b08a      	sub	sp, #40	@ 0x28
 8002ffa:	af02      	add	r7, sp, #8
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	3310      	adds	r3, #16
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	3304      	adds	r3, #4
 800301c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	429a      	cmp	r2, r3
 8003028:	d901      	bls.n	800302e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e06b      	b.n	8003106 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	429a      	cmp	r2, r3
 8003042:	d902      	bls.n	800304a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3303      	adds	r3, #3
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003052:	e02a      	b.n	80030aa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	429a      	cmp	r2, r3
 8003068:	d902      	bls.n	8003070 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3303      	adds	r3, #3
 8003074:	089b      	lsrs	r3, r3, #2
 8003076:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68d9      	ldr	r1, [r3, #12]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	4603      	mov	r3, r0
 800308c:	6978      	ldr	r0, [r7, #20]
 800308e:	f003 f8a9 	bl	80061e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	441a      	add	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	441a      	add	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d809      	bhi.n	80030d4 <PCD_WriteEmptyTxFifo+0xde>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d203      	bcs.n	80030d4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1bf      	bne.n	8003054 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d811      	bhi.n	8003104 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	2201      	movs	r2, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	6939      	ldr	r1, [r7, #16]
 80030fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003100:	4013      	ands	r3, r2
 8003102:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	333c      	adds	r3, #60	@ 0x3c
 8003128:	3304      	adds	r3, #4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	799b      	ldrb	r3, [r3, #6]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d17b      	bne.n	800323e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	4a61      	ldr	r2, [pc, #388]	@ (80032d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	f240 80b9 	bls.w	80032cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80b3 	beq.w	80032cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003172:	461a      	mov	r2, r3
 8003174:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003178:	6093      	str	r3, [r2, #8]
 800317a:	e0a7      	b.n	80032cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003192:	461a      	mov	r2, r3
 8003194:	2320      	movs	r3, #32
 8003196:	6093      	str	r3, [r2, #8]
 8003198:	e098      	b.n	80032cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f040 8093 	bne.w	80032cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	4a4b      	ldr	r2, [pc, #300]	@ (80032d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d90f      	bls.n	80031ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031c4:	461a      	mov	r2, r3
 80031c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ca:	6093      	str	r3, [r2, #8]
 80031cc:	e07e      	b.n	80032cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	3304      	adds	r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a1a      	ldr	r2, [r3, #32]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	0159      	lsls	r1, r3, #5
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	440b      	add	r3, r1
 80031f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fa:	1ad2      	subs	r2, r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d114      	bne.n	8003230 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003218:	461a      	mov	r2, r3
 800321a:	2101      	movs	r1, #1
 800321c:	f003 fa78 	bl	8006710 <USB_EP0_OutStart>
 8003220:	e006      	b.n	8003230 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	441a      	add	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	4619      	mov	r1, r3
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f005 fd06 	bl	8008c48 <HAL_PCD_DataOutStageCallback>
 800323c:	e046      	b.n	80032cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	4a26      	ldr	r2, [pc, #152]	@ (80032dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d124      	bne.n	8003290 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	4413      	add	r3, r2
 8003258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800325c:	461a      	mov	r2, r3
 800325e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003262:	6093      	str	r3, [r2, #8]
 8003264:	e032      	b.n	80032cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800327c:	461a      	mov	r2, r3
 800327e:	2320      	movs	r3, #32
 8003280:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f005 fcdd 	bl	8008c48 <HAL_PCD_DataOutStageCallback>
 800328e:	e01d      	b.n	80032cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d114      	bne.n	80032c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d108      	bne.n	80032c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032b8:	461a      	mov	r2, r3
 80032ba:	2100      	movs	r1, #0
 80032bc:	f003 fa28 	bl	8006710 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	4619      	mov	r1, r3
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f005 fcbe 	bl	8008c48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	4f54300a 	.word	0x4f54300a
 80032dc:	4f54310a 	.word	0x4f54310a

080032e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	333c      	adds	r3, #60	@ 0x3c
 80032f8:	3304      	adds	r3, #4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a15      	ldr	r2, [pc, #84]	@ (8003368 <PCD_EP_OutSetupPacket_int+0x88>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d90e      	bls.n	8003334 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800332c:	461a      	mov	r2, r3
 800332e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003332:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f005 fc75 	bl	8008c24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a0a      	ldr	r2, [pc, #40]	@ (8003368 <PCD_EP_OutSetupPacket_int+0x88>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d90c      	bls.n	800335c <PCD_EP_OutSetupPacket_int+0x7c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	799b      	ldrb	r3, [r3, #6]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d108      	bne.n	800335c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003354:	461a      	mov	r2, r3
 8003356:	2101      	movs	r1, #1
 8003358:	f003 f9da 	bl	8006710 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	4f54300a 	.word	0x4f54300a

0800336c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
 8003378:	4613      	mov	r3, r2
 800337a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d107      	bne.n	800339a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800338a:	883b      	ldrh	r3, [r7, #0]
 800338c:	0419      	lsls	r1, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	430a      	orrs	r2, r1
 8003396:	629a      	str	r2, [r3, #40]	@ 0x28
 8003398:	e028      	b.n	80033ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	4413      	add	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e00d      	b.n	80033ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	3340      	adds	r3, #64	@ 0x40
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	4413      	add	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	3301      	adds	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	7bfa      	ldrb	r2, [r7, #15]
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3ec      	bcc.n	80033ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033d4:	883b      	ldrh	r3, [r7, #0]
 80033d6:	0418      	lsls	r0, r3, #16
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	3b01      	subs	r3, #1
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	4302      	orrs	r2, r0
 80033e4:	3340      	adds	r3, #64	@ 0x40
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e267      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d075      	beq.n	800353e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003452:	4b88      	ldr	r3, [pc, #544]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b04      	cmp	r3, #4
 800345c:	d00c      	beq.n	8003478 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345e:	4b85      	ldr	r3, [pc, #532]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003466:	2b08      	cmp	r3, #8
 8003468:	d112      	bne.n	8003490 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346a:	4b82      	ldr	r3, [pc, #520]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003472:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003476:	d10b      	bne.n	8003490 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	4b7e      	ldr	r3, [pc, #504]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d05b      	beq.n	800353c <HAL_RCC_OscConfig+0x108>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d157      	bne.n	800353c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e242      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003498:	d106      	bne.n	80034a8 <HAL_RCC_OscConfig+0x74>
 800349a:	4b76      	ldr	r3, [pc, #472]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a75      	ldr	r2, [pc, #468]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e01d      	b.n	80034e4 <HAL_RCC_OscConfig+0xb0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x98>
 80034b2:	4b70      	ldr	r3, [pc, #448]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a6f      	ldr	r2, [pc, #444]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b6d      	ldr	r3, [pc, #436]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a6c      	ldr	r2, [pc, #432]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0xb0>
 80034cc:	4b69      	ldr	r3, [pc, #420]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a68      	ldr	r2, [pc, #416]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b66      	ldr	r3, [pc, #408]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a65      	ldr	r2, [pc, #404]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fd fe10 	bl	8001110 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f4:	f7fd fe0c 	bl	8001110 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	@ 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e207      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	4b5b      	ldr	r3, [pc, #364]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0xc0>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd fdfc 	bl	8001110 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800351c:	f7fd fdf8 	bl	8001110 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	@ 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1f3      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	4b51      	ldr	r3, [pc, #324]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0xe8>
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d063      	beq.n	8003612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800354a:	4b4a      	ldr	r3, [pc, #296]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003556:	4b47      	ldr	r3, [pc, #284]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800355e:	2b08      	cmp	r3, #8
 8003560:	d11c      	bne.n	800359c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003562:	4b44      	ldr	r3, [pc, #272]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d116      	bne.n	800359c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356e:	4b41      	ldr	r3, [pc, #260]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_RCC_OscConfig+0x152>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d001      	beq.n	8003586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e1c7      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003586:	4b3b      	ldr	r3, [pc, #236]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4937      	ldr	r1, [pc, #220]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	e03a      	b.n	8003612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d020      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a4:	4b34      	ldr	r3, [pc, #208]	@ (8003678 <HAL_RCC_OscConfig+0x244>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7fd fdb1 	bl	8001110 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b2:	f7fd fdad 	bl	8001110 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e1a8      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d0:	4b28      	ldr	r3, [pc, #160]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4925      	ldr	r1, [pc, #148]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]
 80035e4:	e015      	b.n	8003612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e6:	4b24      	ldr	r3, [pc, #144]	@ (8003678 <HAL_RCC_OscConfig+0x244>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fd fd90 	bl	8001110 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f4:	f7fd fd8c 	bl	8001110 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e187      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d036      	beq.n	800368c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003626:	4b15      	ldr	r3, [pc, #84]	@ (800367c <HAL_RCC_OscConfig+0x248>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fd fd70 	bl	8001110 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003634:	f7fd fd6c 	bl	8001110 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e167      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x200>
 8003652:	e01b      	b.n	800368c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003654:	4b09      	ldr	r3, [pc, #36]	@ (800367c <HAL_RCC_OscConfig+0x248>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7fd fd59 	bl	8001110 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	e00e      	b.n	8003680 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003662:	f7fd fd55 	bl	8001110 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d907      	bls.n	8003680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e150      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
 8003674:	40023800 	.word	0x40023800
 8003678:	42470000 	.word	0x42470000
 800367c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	4b88      	ldr	r3, [pc, #544]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ea      	bne.n	8003662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8097 	beq.w	80037c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369e:	4b81      	ldr	r3, [pc, #516]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10f      	bne.n	80036ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	4b7d      	ldr	r3, [pc, #500]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	4a7c      	ldr	r2, [pc, #496]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ba:	4b7a      	ldr	r3, [pc, #488]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	4b77      	ldr	r3, [pc, #476]	@ (80038a8 <HAL_RCC_OscConfig+0x474>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d118      	bne.n	8003708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d6:	4b74      	ldr	r3, [pc, #464]	@ (80038a8 <HAL_RCC_OscConfig+0x474>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a73      	ldr	r2, [pc, #460]	@ (80038a8 <HAL_RCC_OscConfig+0x474>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e2:	f7fd fd15 	bl	8001110 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ea:	f7fd fd11 	bl	8001110 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e10c      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	4b6a      	ldr	r3, [pc, #424]	@ (80038a8 <HAL_RCC_OscConfig+0x474>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x2ea>
 8003710:	4b64      	ldr	r3, [pc, #400]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003714:	4a63      	ldr	r2, [pc, #396]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6713      	str	r3, [r2, #112]	@ 0x70
 800371c:	e01c      	b.n	8003758 <HAL_RCC_OscConfig+0x324>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b05      	cmp	r3, #5
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x30c>
 8003726:	4b5f      	ldr	r3, [pc, #380]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372a:	4a5e      	ldr	r2, [pc, #376]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6713      	str	r3, [r2, #112]	@ 0x70
 8003732:	4b5c      	ldr	r3, [pc, #368]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003736:	4a5b      	ldr	r2, [pc, #364]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6713      	str	r3, [r2, #112]	@ 0x70
 800373e:	e00b      	b.n	8003758 <HAL_RCC_OscConfig+0x324>
 8003740:	4b58      	ldr	r3, [pc, #352]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003744:	4a57      	ldr	r2, [pc, #348]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003746:	f023 0301 	bic.w	r3, r3, #1
 800374a:	6713      	str	r3, [r2, #112]	@ 0x70
 800374c:	4b55      	ldr	r3, [pc, #340]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003750:	4a54      	ldr	r2, [pc, #336]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003752:	f023 0304 	bic.w	r3, r3, #4
 8003756:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d015      	beq.n	800378c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fd fcd6 	bl	8001110 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003766:	e00a      	b.n	800377e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003768:	f7fd fcd2 	bl	8001110 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0cb      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377e:	4b49      	ldr	r3, [pc, #292]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0ee      	beq.n	8003768 <HAL_RCC_OscConfig+0x334>
 800378a:	e014      	b.n	80037b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378c:	f7fd fcc0 	bl	8001110 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003792:	e00a      	b.n	80037aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003794:	f7fd fcbc 	bl	8001110 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e0b5      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037aa:	4b3e      	ldr	r3, [pc, #248]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1ee      	bne.n	8003794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d105      	bne.n	80037c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037bc:	4b39      	ldr	r3, [pc, #228]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	4a38      	ldr	r2, [pc, #224]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80037c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80a1 	beq.w	8003914 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d2:	4b34      	ldr	r3, [pc, #208]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d05c      	beq.n	8003898 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d141      	bne.n	800386a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e6:	4b31      	ldr	r3, [pc, #196]	@ (80038ac <HAL_RCC_OscConfig+0x478>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fd fc90 	bl	8001110 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fd fc8c 	bl	8001110 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e087      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	4b27      	ldr	r3, [pc, #156]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	019b      	lsls	r3, r3, #6
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	3b01      	subs	r3, #1
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	061b      	lsls	r3, r3, #24
 8003836:	491b      	ldr	r1, [pc, #108]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ac <HAL_RCC_OscConfig+0x478>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fd fc65 	bl	8001110 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384a:	f7fd fc61 	bl	8001110 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e05c      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385c:	4b11      	ldr	r3, [pc, #68]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x416>
 8003868:	e054      	b.n	8003914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b10      	ldr	r3, [pc, #64]	@ (80038ac <HAL_RCC_OscConfig+0x478>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fd fc4e 	bl	8001110 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fd fc4a 	bl	8001110 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e045      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x444>
 8003896:	e03d      	b.n	8003914 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e038      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40007000 	.word	0x40007000
 80038ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003920 <HAL_RCC_OscConfig+0x4ec>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d028      	beq.n	8003910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d121      	bne.n	8003910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d11a      	bne.n	8003910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d111      	bne.n	8003910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	3b01      	subs	r3, #1
 80038fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d107      	bne.n	8003910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800

08003924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0cc      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	4b68      	ldr	r3, [pc, #416]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d90c      	bls.n	8003960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b65      	ldr	r3, [pc, #404]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b63      	ldr	r3, [pc, #396]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0b8      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d020      	beq.n	80039ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003978:	4b59      	ldr	r3, [pc, #356]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4a58      	ldr	r2, [pc, #352]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003982:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003990:	4b53      	ldr	r3, [pc, #332]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4a52      	ldr	r2, [pc, #328]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800399a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	4b50      	ldr	r3, [pc, #320]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	494d      	ldr	r1, [pc, #308]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d044      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	4b47      	ldr	r3, [pc, #284]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d119      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e07f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d003      	beq.n	80039e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e06f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e067      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a02:	4b37      	ldr	r3, [pc, #220]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 0203 	bic.w	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4934      	ldr	r1, [pc, #208]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a14:	f7fd fb7c 	bl	8001110 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1c:	f7fd fb78 	bl	8001110 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e04f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 020c 	and.w	r2, r3, #12
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d1eb      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a44:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d20c      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b22      	ldr	r3, [pc, #136]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b20      	ldr	r3, [pc, #128]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e032      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	4b19      	ldr	r3, [pc, #100]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4916      	ldr	r1, [pc, #88]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a96:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	490e      	ldr	r1, [pc, #56]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aaa:	f000 f821 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	490a      	ldr	r1, [pc, #40]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8003abc:	5ccb      	ldrb	r3, [r1, r3]
 8003abe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac2:	4a09      	ldr	r2, [pc, #36]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ac6:	4b09      	ldr	r3, [pc, #36]	@ (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd fadc 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40023c00 	.word	0x40023c00
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	0800926c 	.word	0x0800926c
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	20000004 	.word	0x20000004

08003af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af4:	b094      	sub	sp, #80	@ 0x50
 8003af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b08:	4b79      	ldr	r3, [pc, #484]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d00d      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x40>
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	f200 80e1 	bhi.w	8003cdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x34>
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b22:	e0db      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b24:	4b73      	ldr	r3, [pc, #460]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b28:	e0db      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b2a:	4b73      	ldr	r3, [pc, #460]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b2e:	e0d8      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b30:	4b6f      	ldr	r3, [pc, #444]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b38:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d063      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b46:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	099b      	lsrs	r3, r3, #6
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b62:	4622      	mov	r2, r4
 8003b64:	462b      	mov	r3, r5
 8003b66:	f04f 0000 	mov.w	r0, #0
 8003b6a:	f04f 0100 	mov.w	r1, #0
 8003b6e:	0159      	lsls	r1, r3, #5
 8003b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b74:	0150      	lsls	r0, r2, #5
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	1a51      	subs	r1, r2, r1
 8003b7e:	6139      	str	r1, [r7, #16]
 8003b80:	4629      	mov	r1, r5
 8003b82:	eb63 0301 	sbc.w	r3, r3, r1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b94:	4659      	mov	r1, fp
 8003b96:	018b      	lsls	r3, r1, #6
 8003b98:	4651      	mov	r1, sl
 8003b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	018a      	lsls	r2, r1, #6
 8003ba2:	4651      	mov	r1, sl
 8003ba4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ba8:	4659      	mov	r1, fp
 8003baa:	eb63 0901 	sbc.w	r9, r3, r1
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bc2:	4690      	mov	r8, r2
 8003bc4:	4699      	mov	r9, r3
 8003bc6:	4623      	mov	r3, r4
 8003bc8:	eb18 0303 	adds.w	r3, r8, r3
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	462b      	mov	r3, r5
 8003bd0:	eb49 0303 	adc.w	r3, r9, r3
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003be2:	4629      	mov	r1, r5
 8003be4:	024b      	lsls	r3, r1, #9
 8003be6:	4621      	mov	r1, r4
 8003be8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bec:	4621      	mov	r1, r4
 8003bee:	024a      	lsls	r2, r1, #9
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c00:	f7fc faf4 	bl	80001ec <__aeabi_uldivmod>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4613      	mov	r3, r2
 8003c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c0c:	e058      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0e:	4b38      	ldr	r3, [pc, #224]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	099b      	lsrs	r3, r3, #6
 8003c14:	2200      	movs	r2, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	4611      	mov	r1, r2
 8003c1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	2300      	movs	r3, #0
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c28:	4642      	mov	r2, r8
 8003c2a:	464b      	mov	r3, r9
 8003c2c:	f04f 0000 	mov.w	r0, #0
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	0159      	lsls	r1, r3, #5
 8003c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c3a:	0150      	lsls	r0, r2, #5
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4641      	mov	r1, r8
 8003c42:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c46:	4649      	mov	r1, r9
 8003c48:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c60:	ebb2 040a 	subs.w	r4, r2, sl
 8003c64:	eb63 050b 	sbc.w	r5, r3, fp
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	00eb      	lsls	r3, r5, #3
 8003c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c76:	00e2      	lsls	r2, r4, #3
 8003c78:	4614      	mov	r4, r2
 8003c7a:	461d      	mov	r5, r3
 8003c7c:	4643      	mov	r3, r8
 8003c7e:	18e3      	adds	r3, r4, r3
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	464b      	mov	r3, r9
 8003c84:	eb45 0303 	adc.w	r3, r5, r3
 8003c88:	607b      	str	r3, [r7, #4]
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c96:	4629      	mov	r1, r5
 8003c98:	028b      	lsls	r3, r1, #10
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	028a      	lsls	r2, r1, #10
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003caa:	2200      	movs	r2, #0
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	61fa      	str	r2, [r7, #28]
 8003cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb4:	f7fc fa9a 	bl	80001ec <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003cd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cda:	e002      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cdc:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3750      	adds	r7, #80	@ 0x50
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	00f42400 	.word	0x00f42400
 8003cf8:	007a1200 	.word	0x007a1200

08003cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d00:	4b03      	ldr	r3, [pc, #12]	@ (8003d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000000 	.word	0x20000000

08003d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d18:	f7ff fff0 	bl	8003cfc <HAL_RCC_GetHCLKFreq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	0a9b      	lsrs	r3, r3, #10
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	4903      	ldr	r1, [pc, #12]	@ (8003d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2a:	5ccb      	ldrb	r3, [r1, r3]
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40023800 	.word	0x40023800
 8003d38:	0800927c 	.word	0x0800927c

08003d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d40:	f7ff ffdc 	bl	8003cfc <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b05      	ldr	r3, [pc, #20]	@ (8003d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	0b5b      	lsrs	r3, r3, #13
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4903      	ldr	r1, [pc, #12]	@ (8003d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	0800927c 	.word	0x0800927c

08003d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e042      	b.n	8003dfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fc ff20 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2224      	movs	r2, #36	@ 0x24
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 ff85 	bl	8004cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	@ 0x28
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d175      	bne.n	8003f10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_UART_Transmit+0x2c>
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e06e      	b.n	8003f12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2221      	movs	r2, #33	@ 0x21
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e42:	f7fd f965 	bl	8001110 <HAL_GetTick>
 8003e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	88fa      	ldrh	r2, [r7, #6]
 8003e52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e5c:	d108      	bne.n	8003e70 <HAL_UART_Transmit+0x6c>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e003      	b.n	8003e78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e78:	e02e      	b.n	8003ed8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2180      	movs	r1, #128	@ 0x80
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fc5d 	bl	8004744 <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e03a      	b.n	8003f12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	e007      	b.n	8003eca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1cb      	bne.n	8003e7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2140      	movs	r1, #64	@ 0x40
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fc29 	bl	8004744 <UART_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e006      	b.n	8003f12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3720      	adds	r7, #32
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b08c      	sub	sp, #48	@ 0x30
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	4613      	mov	r3, r2
 8003f26:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d14a      	bne.n	8003fca <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e043      	b.n	8003fcc <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fc4e 	bl	80047f8 <UART_Start_Receive_DMA>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003f62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d12c      	bne.n	8003fc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d125      	bne.n	8003fbe <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	617b      	str	r3, [r7, #20]
   return(result);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f043 0310 	orr.w	r3, r3, #16
 8003f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6a39      	ldr	r1, [r7, #32]
 8003fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e5      	bne.n	8003f88 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8003fbc:	e002      	b.n	8003fc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fc8:	e000      	b.n	8003fcc <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
  }
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3730      	adds	r7, #48	@ 0x30
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_UART_IRQHandler+0x66>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fd81 	bl	8004b3a <UART_Receive_IT>
      return;
 8004038:	e25b      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800403a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80de 	beq.w	8004200 <HAL_UART_IRQHandler+0x22c>
 8004044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004054:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80d1 	beq.w	8004200 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_UART_IRQHandler+0xae>
 800406a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f043 0201 	orr.w	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_UART_IRQHandler+0xd2>
 800408e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	f043 0202 	orr.w	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HAL_UART_IRQHandler+0xf6>
 80040b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	f043 0204 	orr.w	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d011      	beq.n	80040fa <HAL_UART_IRQHandler+0x126>
 80040d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d105      	bne.n	80040ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	f043 0208 	orr.w	r2, r3, #8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 81f2 	beq.w	80044e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x14e>
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fd0c 	bl	8004b3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412c:	2b40      	cmp	r3, #64	@ 0x40
 800412e:	bf0c      	ite	eq
 8004130:	2301      	moveq	r3, #1
 8004132:	2300      	movne	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_UART_IRQHandler+0x17a>
 8004146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d04f      	beq.n	80041ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fc14 	bl	800497c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415e:	2b40      	cmp	r3, #64	@ 0x40
 8004160:	d141      	bne.n	80041e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3314      	adds	r3, #20
 8004168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800417c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004180:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3314      	adds	r3, #20
 800418a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800418e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004192:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800419a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1d9      	bne.n	8004162 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d013      	beq.n	80041de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	4a7e      	ldr	r2, [pc, #504]	@ (80043b4 <HAL_UART_IRQHandler+0x3e0>)
 80041bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd fa78 	bl	80016b8 <HAL_DMA_Abort_IT>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041d8:	4610      	mov	r0, r2
 80041da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	e00e      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f9a8 	bl	8004534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	e00a      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f9a4 	bl	8004534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	e006      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f9a0 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041fa:	e175      	b.n	80044e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	bf00      	nop
    return;
 80041fe:	e173      	b.n	80044e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	2b01      	cmp	r3, #1
 8004206:	f040 814f 	bne.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8148 	beq.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8141 	beq.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004246:	2b40      	cmp	r3, #64	@ 0x40
 8004248:	f040 80b6 	bne.w	80043b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8145 	beq.w	80044ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800426a:	429a      	cmp	r2, r3
 800426c:	f080 813e 	bcs.w	80044ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004276:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004282:	f000 8088 	beq.w	8004396 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800429c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1d9      	bne.n	8004286 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3314      	adds	r3, #20
 80042d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3314      	adds	r3, #20
 80042f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004308:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e1      	bne.n	80042d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3314      	adds	r3, #20
 8004314:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800431e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004324:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3314      	adds	r3, #20
 800432e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004332:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004334:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004338:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004340:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e3      	bne.n	800430e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004366:	f023 0310 	bic.w	r3, r3, #16
 800436a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004378:	65ba      	str	r2, [r7, #88]	@ 0x58
 800437a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800437e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e3      	bne.n	8004354 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004390:	4618      	mov	r0, r3
 8004392:	f7fd f921 	bl	80015d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	4619      	mov	r1, r3
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7fc f8b6 	bl	800051e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b2:	e09b      	b.n	80044ec <HAL_UART_IRQHandler+0x518>
 80043b4:	08004a43 	.word	0x08004a43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 808e 	beq.w	80044f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8089 	beq.w	80044f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004402:	647a      	str	r2, [r7, #68]	@ 0x44
 8004404:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004408:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e3      	bne.n	80043de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	623b      	str	r3, [r7, #32]
   return(result);
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3314      	adds	r3, #20
 8004436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800443a:	633a      	str	r2, [r7, #48]	@ 0x30
 800443c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e3      	bne.n	8004416 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60fb      	str	r3, [r7, #12]
   return(result);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0310 	bic.w	r3, r3, #16
 8004472:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004480:	61fa      	str	r2, [r7, #28]
 8004482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	69b9      	ldr	r1, [r7, #24]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	617b      	str	r3, [r7, #20]
   return(result);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e3      	bne.n	800445c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800449a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fc f83c 	bl	800051e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a6:	e023      	b.n	80044f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <HAL_UART_IRQHandler+0x4f4>
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fad2 	bl	8004a6a <UART_Transmit_IT>
    return;
 80044c6:	e014      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00e      	beq.n	80044f2 <HAL_UART_IRQHandler+0x51e>
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fb12 	bl	8004b0a <UART_EndTransmit_IT>
    return;
 80044e6:	e004      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80044e8:	bf00      	nop
 80044ea:	e002      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80044f0:	bf00      	nop
  }
}
 80044f2:	37e8      	adds	r7, #232	@ 0xe8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b09c      	sub	sp, #112	@ 0x70
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d172      	bne.n	800464a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004566:	2200      	movs	r2, #0
 8004568:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800456a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800457a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800457c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	330c      	adds	r3, #12
 8004588:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800458a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800458c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e5      	bne.n	800456a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3314      	adds	r3, #20
 80045a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80045b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3314      	adds	r3, #20
 80045bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045be:	647a      	str	r2, [r7, #68]	@ 0x44
 80045c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e5      	bne.n	800459e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3314      	adds	r3, #20
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	623b      	str	r3, [r7, #32]
   return(result);
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80045ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3314      	adds	r3, #20
 80045f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80045f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e5      	bne.n	80045d2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004608:	2220      	movs	r2, #32
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800460e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	2b01      	cmp	r3, #1
 8004614:	d119      	bne.n	800464a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	60fb      	str	r3, [r7, #12]
   return(result);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f023 0310 	bic.w	r3, r3, #16
 800462c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800462e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004636:	61fa      	str	r2, [r7, #28]
 8004638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	69b9      	ldr	r1, [r7, #24]
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	617b      	str	r3, [r7, #20]
   return(result);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e5      	bne.n	8004616 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800464a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464c:	2200      	movs	r2, #0
 800464e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004654:	2b01      	cmp	r3, #1
 8004656:	d106      	bne.n	8004666 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800465a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800465c:	4619      	mov	r1, r3
 800465e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004660:	f7fb ff5d 	bl	800051e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004664:	e002      	b.n	800466c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004666:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004668:	f7ff ff50 	bl	800450c <HAL_UART_RxCpltCallback>
}
 800466c:	bf00      	nop
 800466e:	3770      	adds	r7, #112	@ 0x70
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004680:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468c:	2b01      	cmp	r3, #1
 800468e:	d108      	bne.n	80046a2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	b29b      	uxth	r3, r3
 8004698:	4619      	mov	r1, r3
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7fb ff3f 	bl	800051e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046a0:	e002      	b.n	80046a8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff ff3c 	bl	8004520 <HAL_UART_RxHalfCpltCallback>
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046cc:	2b80      	cmp	r3, #128	@ 0x80
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b21      	cmp	r3, #33	@ 0x21
 80046e2:	d108      	bne.n	80046f6 <UART_DMAError+0x46>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2200      	movs	r2, #0
 80046ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80046f0:	68b8      	ldr	r0, [r7, #8]
 80046f2:	f000 f91b 	bl	800492c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004700:	2b40      	cmp	r3, #64	@ 0x40
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b22      	cmp	r3, #34	@ 0x22
 8004716:	d108      	bne.n	800472a <UART_DMAError+0x7a>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004724:	68b8      	ldr	r0, [r7, #8]
 8004726:	f000 f929 	bl	800497c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	f043 0210 	orr.w	r2, r3, #16
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004736:	68b8      	ldr	r0, [r7, #8]
 8004738:	f7ff fefc 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	4613      	mov	r3, r2
 8004752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004754:	e03b      	b.n	80047ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d037      	beq.n	80047ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475e:	f7fc fcd7 	bl	8001110 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	6a3a      	ldr	r2, [r7, #32]
 800476a:	429a      	cmp	r2, r3
 800476c:	d302      	bcc.n	8004774 <UART_WaitOnFlagUntilTimeout+0x30>
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e03a      	b.n	80047ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d023      	beq.n	80047ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b80      	cmp	r3, #128	@ 0x80
 800478a:	d020      	beq.n	80047ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b40      	cmp	r3, #64	@ 0x40
 8004790:	d01d      	beq.n	80047ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b08      	cmp	r3, #8
 800479e:	d116      	bne.n	80047ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f8e0 	bl	800497c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2208      	movs	r2, #8
 80047c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00f      	b.n	80047ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4013      	ands	r3, r2
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	bf0c      	ite	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	2300      	movne	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d0b4      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b098      	sub	sp, #96	@ 0x60
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	4613      	mov	r3, r2
 8004804:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	88fa      	ldrh	r2, [r7, #6]
 8004810:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2222      	movs	r2, #34	@ 0x22
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004824:	4a3e      	ldr	r2, [pc, #248]	@ (8004920 <UART_Start_Receive_DMA+0x128>)
 8004826:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482c:	4a3d      	ldr	r2, [pc, #244]	@ (8004924 <UART_Start_Receive_DMA+0x12c>)
 800482e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004834:	4a3c      	ldr	r2, [pc, #240]	@ (8004928 <UART_Start_Receive_DMA+0x130>)
 8004836:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483c:	2200      	movs	r2, #0
 800483e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004840:	f107 0308 	add.w	r3, r7, #8
 8004844:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	f7fc fe66 	bl	8001528 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d019      	beq.n	80048ae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800488a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800488c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004890:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800489a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800489c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80048a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80048a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e5      	bne.n	800487a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80048d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3314      	adds	r3, #20
 80048e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	617b      	str	r3, [r7, #20]
   return(result);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3314      	adds	r3, #20
 8004900:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004902:	627a      	str	r2, [r7, #36]	@ 0x24
 8004904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6a39      	ldr	r1, [r7, #32]
 8004908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3760      	adds	r7, #96	@ 0x60
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	08004549 	.word	0x08004549
 8004924:	08004675 	.word	0x08004675
 8004928:	080046b1 	.word	0x080046b1

0800492c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800492c:	b480      	push	{r7}
 800492e:	b089      	sub	sp, #36	@ 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	60bb      	str	r3, [r7, #8]
   return(result);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	61ba      	str	r2, [r7, #24]
 8004956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	6979      	ldr	r1, [r7, #20]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	613b      	str	r3, [r7, #16]
   return(result);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e5      	bne.n	8004934 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004970:	bf00      	nop
 8004972:	3724      	adds	r7, #36	@ 0x24
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b095      	sub	sp, #84	@ 0x54
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004996:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800499a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80049a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e5      	bne.n	8004984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3314      	adds	r3, #20
 80049be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3314      	adds	r3, #20
 80049d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e5      	bne.n	80049b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d119      	bne.n	8004a28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f023 0310 	bic.w	r3, r3, #16
 8004a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a14:	61ba      	str	r2, [r7, #24]
 8004a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6979      	ldr	r1, [r7, #20]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	613b      	str	r3, [r7, #16]
   return(result);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e5      	bne.n	80049f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a36:	bf00      	nop
 8004a38:	3754      	adds	r7, #84	@ 0x54
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff fd69 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a62:	bf00      	nop
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b21      	cmp	r3, #33	@ 0x21
 8004a7c:	d13e      	bne.n	8004afc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a86:	d114      	bne.n	8004ab2 <UART_Transmit_IT+0x48>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d110      	bne.n	8004ab2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aa4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	1c9a      	adds	r2, r3, #2
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	621a      	str	r2, [r3, #32]
 8004ab0:	e008      	b.n	8004ac4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	1c59      	adds	r1, r3, #1
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6211      	str	r1, [r2, #32]
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10f      	bne.n	8004af8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ae6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	e000      	b.n	8004afe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004afc:	2302      	movs	r3, #2
  }
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff fce4 	bl	80044f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b08c      	sub	sp, #48	@ 0x30
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b22      	cmp	r3, #34	@ 0x22
 8004b4c:	f040 80ae 	bne.w	8004cac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b58:	d117      	bne.n	8004b8a <UART_Receive_IT+0x50>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d113      	bne.n	8004b8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b82:	1c9a      	adds	r2, r3, #2
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b88:	e026      	b.n	8004bd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b9c:	d007      	beq.n	8004bae <UART_Receive_IT+0x74>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <UART_Receive_IT+0x82>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	e008      	b.n	8004bce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	4619      	mov	r1, r3
 8004be6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d15d      	bne.n	8004ca8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0220 	bic.w	r2, r2, #32
 8004bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d135      	bne.n	8004c9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	613b      	str	r3, [r7, #16]
   return(result);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f023 0310 	bic.w	r3, r3, #16
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c58:	623a      	str	r2, [r7, #32]
 8004c5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	69f9      	ldr	r1, [r7, #28]
 8004c5e:	6a3a      	ldr	r2, [r7, #32]
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e5      	bne.n	8004c38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d10a      	bne.n	8004c90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fb fc41 	bl	800051e <HAL_UARTEx_RxEventCallback>
 8004c9c:	e002      	b.n	8004ca4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fc34 	bl	800450c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e002      	b.n	8004cae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	e000      	b.n	8004cae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004cac:	2302      	movs	r3, #2
  }
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3730      	adds	r7, #48	@ 0x30
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cbc:	b0c0      	sub	sp, #256	@ 0x100
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	68d9      	ldr	r1, [r3, #12]
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	ea40 0301 	orr.w	r3, r0, r1
 8004ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d10:	f021 010c 	bic.w	r1, r1, #12
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d32:	6999      	ldr	r1, [r3, #24]
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	ea40 0301 	orr.w	r3, r0, r1
 8004d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b8f      	ldr	r3, [pc, #572]	@ (8004f84 <UART_SetConfig+0x2cc>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d005      	beq.n	8004d58 <UART_SetConfig+0xa0>
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b8d      	ldr	r3, [pc, #564]	@ (8004f88 <UART_SetConfig+0x2d0>)
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d104      	bne.n	8004d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fe fff0 	bl	8003d3c <HAL_RCC_GetPCLK2Freq>
 8004d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d60:	e003      	b.n	8004d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d62:	f7fe ffd7 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 8004d66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d74:	f040 810c 	bne.w	8004f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d92:	415b      	adcs	r3, r3
 8004d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	eb12 0801 	adds.w	r8, r2, r1
 8004da0:	4629      	mov	r1, r5
 8004da2:	eb43 0901 	adc.w	r9, r3, r1
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dba:	4690      	mov	r8, r2
 8004dbc:	4699      	mov	r9, r3
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	eb18 0303 	adds.w	r3, r8, r3
 8004dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dc8:	462b      	mov	r3, r5
 8004dca:	eb49 0303 	adc.w	r3, r9, r3
 8004dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004de6:	460b      	mov	r3, r1
 8004de8:	18db      	adds	r3, r3, r3
 8004dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dec:	4613      	mov	r3, r2
 8004dee:	eb42 0303 	adc.w	r3, r2, r3
 8004df2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004dfc:	f7fb f9f6 	bl	80001ec <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4b61      	ldr	r3, [pc, #388]	@ (8004f8c <UART_SetConfig+0x2d4>)
 8004e06:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	011c      	lsls	r4, r3, #4
 8004e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	1891      	adds	r1, r2, r2
 8004e26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e28:	415b      	adcs	r3, r3
 8004e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e30:	4641      	mov	r1, r8
 8004e32:	eb12 0a01 	adds.w	sl, r2, r1
 8004e36:	4649      	mov	r1, r9
 8004e38:	eb43 0b01 	adc.w	fp, r3, r1
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e50:	4692      	mov	sl, r2
 8004e52:	469b      	mov	fp, r3
 8004e54:	4643      	mov	r3, r8
 8004e56:	eb1a 0303 	adds.w	r3, sl, r3
 8004e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	eb4b 0303 	adc.w	r3, fp, r3
 8004e64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	18db      	adds	r3, r3, r3
 8004e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e82:	4613      	mov	r3, r2
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e92:	f7fb f9ab 	bl	80001ec <__aeabi_uldivmod>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f8c <UART_SetConfig+0x2d4>)
 8004e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	2264      	movs	r2, #100	@ 0x64
 8004ea6:	fb02 f303 	mul.w	r3, r2, r3
 8004eaa:	1acb      	subs	r3, r1, r3
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004eb2:	4b36      	ldr	r3, [pc, #216]	@ (8004f8c <UART_SetConfig+0x2d4>)
 8004eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ec0:	441c      	add	r4, r3
 8004ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	1891      	adds	r1, r2, r2
 8004eda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004edc:	415b      	adcs	r3, r3
 8004ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	1851      	adds	r1, r2, r1
 8004ee8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004eea:	4649      	mov	r1, r9
 8004eec:	414b      	adcs	r3, r1
 8004eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004efc:	4659      	mov	r1, fp
 8004efe:	00cb      	lsls	r3, r1, #3
 8004f00:	4651      	mov	r1, sl
 8004f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f06:	4651      	mov	r1, sl
 8004f08:	00ca      	lsls	r2, r1, #3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4642      	mov	r2, r8
 8004f12:	189b      	adds	r3, r3, r2
 8004f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f18:	464b      	mov	r3, r9
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	eb42 0303 	adc.w	r3, r2, r3
 8004f20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f38:	460b      	mov	r3, r1
 8004f3a:	18db      	adds	r3, r3, r3
 8004f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f3e:	4613      	mov	r3, r2
 8004f40:	eb42 0303 	adc.w	r3, r2, r3
 8004f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f4e:	f7fb f94d 	bl	80001ec <__aeabi_uldivmod>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4b0d      	ldr	r3, [pc, #52]	@ (8004f8c <UART_SetConfig+0x2d4>)
 8004f58:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	2164      	movs	r1, #100	@ 0x64
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	3332      	adds	r3, #50	@ 0x32
 8004f6a:	4a08      	ldr	r2, [pc, #32]	@ (8004f8c <UART_SetConfig+0x2d4>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	f003 0207 	and.w	r2, r3, #7
 8004f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4422      	add	r2, r4
 8004f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f80:	e106      	b.n	8005190 <UART_SetConfig+0x4d8>
 8004f82:	bf00      	nop
 8004f84:	40011000 	.word	0x40011000
 8004f88:	40011400 	.word	0x40011400
 8004f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004fa2:	4642      	mov	r2, r8
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	1891      	adds	r1, r2, r2
 8004fa8:	6239      	str	r1, [r7, #32]
 8004faa:	415b      	adcs	r3, r3
 8004fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	1854      	adds	r4, r2, r1
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	eb43 0501 	adc.w	r5, r3, r1
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	00eb      	lsls	r3, r5, #3
 8004fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fca:	00e2      	lsls	r2, r4, #3
 8004fcc:	4614      	mov	r4, r2
 8004fce:	461d      	mov	r5, r3
 8004fd0:	4643      	mov	r3, r8
 8004fd2:	18e3      	adds	r3, r4, r3
 8004fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fd8:	464b      	mov	r3, r9
 8004fda:	eb45 0303 	adc.w	r3, r5, r3
 8004fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ffe:	4629      	mov	r1, r5
 8005000:	008b      	lsls	r3, r1, #2
 8005002:	4621      	mov	r1, r4
 8005004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005008:	4621      	mov	r1, r4
 800500a:	008a      	lsls	r2, r1, #2
 800500c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005010:	f7fb f8ec 	bl	80001ec <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4b60      	ldr	r3, [pc, #384]	@ (800519c <UART_SetConfig+0x4e4>)
 800501a:	fba3 2302 	umull	r2, r3, r3, r2
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	011c      	lsls	r4, r3, #4
 8005022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800502c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	1891      	adds	r1, r2, r2
 800503a:	61b9      	str	r1, [r7, #24]
 800503c:	415b      	adcs	r3, r3
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005044:	4641      	mov	r1, r8
 8005046:	1851      	adds	r1, r2, r1
 8005048:	6139      	str	r1, [r7, #16]
 800504a:	4649      	mov	r1, r9
 800504c:	414b      	adcs	r3, r1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800505c:	4659      	mov	r1, fp
 800505e:	00cb      	lsls	r3, r1, #3
 8005060:	4651      	mov	r1, sl
 8005062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005066:	4651      	mov	r1, sl
 8005068:	00ca      	lsls	r2, r1, #3
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	4603      	mov	r3, r0
 8005070:	4642      	mov	r2, r8
 8005072:	189b      	adds	r3, r3, r2
 8005074:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005078:	464b      	mov	r3, r9
 800507a:	460a      	mov	r2, r1
 800507c:	eb42 0303 	adc.w	r3, r2, r3
 8005080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800508e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800509c:	4649      	mov	r1, r9
 800509e:	008b      	lsls	r3, r1, #2
 80050a0:	4641      	mov	r1, r8
 80050a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a6:	4641      	mov	r1, r8
 80050a8:	008a      	lsls	r2, r1, #2
 80050aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050ae:	f7fb f89d 	bl	80001ec <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4611      	mov	r1, r2
 80050b8:	4b38      	ldr	r3, [pc, #224]	@ (800519c <UART_SetConfig+0x4e4>)
 80050ba:	fba3 2301 	umull	r2, r3, r3, r1
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2264      	movs	r2, #100	@ 0x64
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	1acb      	subs	r3, r1, r3
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	3332      	adds	r3, #50	@ 0x32
 80050cc:	4a33      	ldr	r2, [pc, #204]	@ (800519c <UART_SetConfig+0x4e4>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050d8:	441c      	add	r4, r3
 80050da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050de:	2200      	movs	r2, #0
 80050e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80050e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80050e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	1891      	adds	r1, r2, r2
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	415b      	adcs	r3, r3
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f8:	4641      	mov	r1, r8
 80050fa:	1851      	adds	r1, r2, r1
 80050fc:	6039      	str	r1, [r7, #0]
 80050fe:	4649      	mov	r1, r9
 8005100:	414b      	adcs	r3, r1
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005110:	4659      	mov	r1, fp
 8005112:	00cb      	lsls	r3, r1, #3
 8005114:	4651      	mov	r1, sl
 8005116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800511a:	4651      	mov	r1, sl
 800511c:	00ca      	lsls	r2, r1, #3
 800511e:	4610      	mov	r0, r2
 8005120:	4619      	mov	r1, r3
 8005122:	4603      	mov	r3, r0
 8005124:	4642      	mov	r2, r8
 8005126:	189b      	adds	r3, r3, r2
 8005128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800512a:	464b      	mov	r3, r9
 800512c:	460a      	mov	r2, r1
 800512e:	eb42 0303 	adc.w	r3, r2, r3
 8005132:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	663b      	str	r3, [r7, #96]	@ 0x60
 800513e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800514c:	4649      	mov	r1, r9
 800514e:	008b      	lsls	r3, r1, #2
 8005150:	4641      	mov	r1, r8
 8005152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005156:	4641      	mov	r1, r8
 8005158:	008a      	lsls	r2, r1, #2
 800515a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800515e:	f7fb f845 	bl	80001ec <__aeabi_uldivmod>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4b0d      	ldr	r3, [pc, #52]	@ (800519c <UART_SetConfig+0x4e4>)
 8005168:	fba3 1302 	umull	r1, r3, r3, r2
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	2164      	movs	r1, #100	@ 0x64
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	3332      	adds	r3, #50	@ 0x32
 800517a:	4a08      	ldr	r2, [pc, #32]	@ (800519c <UART_SetConfig+0x4e4>)
 800517c:	fba2 2303 	umull	r2, r3, r2, r3
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	f003 020f 	and.w	r2, r3, #15
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4422      	add	r2, r4
 800518e:	609a      	str	r2, [r3, #8]
}
 8005190:	bf00      	nop
 8005192:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005196:	46bd      	mov	sp, r7
 8005198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800519c:	51eb851f 	.word	0x51eb851f

080051a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051a0:	b084      	sub	sp, #16
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	f107 001c 	add.w	r0, r7, #28
 80051ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d123      	bne.n	8005202 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80051ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d105      	bne.n	80051f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f001 fae8 	bl	80067cc <USB_CoreReset>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]
 8005200:	e01b      	b.n	800523a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f001 fadc 	bl	80067cc <USB_CoreReset>
 8005214:	4603      	mov	r3, r0
 8005216:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005218:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	639a      	str	r2, [r3, #56]	@ 0x38
 800522c:	e005      	b.n	800523a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005232:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800523a:	7fbb      	ldrb	r3, [r7, #30]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d10b      	bne.n	8005258 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f043 0206 	orr.w	r2, r3, #6
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005264:	b004      	add	sp, #16
 8005266:	4770      	bx	lr

08005268 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d165      	bne.n	8005348 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4a41      	ldr	r2, [pc, #260]	@ (8005384 <USB_SetTurnaroundTime+0x11c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d906      	bls.n	8005292 <USB_SetTurnaroundTime+0x2a>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4a40      	ldr	r2, [pc, #256]	@ (8005388 <USB_SetTurnaroundTime+0x120>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d202      	bcs.n	8005292 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800528c:	230f      	movs	r3, #15
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e062      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4a3c      	ldr	r2, [pc, #240]	@ (8005388 <USB_SetTurnaroundTime+0x120>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d306      	bcc.n	80052a8 <USB_SetTurnaroundTime+0x40>
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4a3b      	ldr	r2, [pc, #236]	@ (800538c <USB_SetTurnaroundTime+0x124>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d202      	bcs.n	80052a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052a2:	230e      	movs	r3, #14
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e057      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4a38      	ldr	r2, [pc, #224]	@ (800538c <USB_SetTurnaroundTime+0x124>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d306      	bcc.n	80052be <USB_SetTurnaroundTime+0x56>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4a37      	ldr	r2, [pc, #220]	@ (8005390 <USB_SetTurnaroundTime+0x128>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d202      	bcs.n	80052be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052b8:	230d      	movs	r3, #13
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e04c      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4a33      	ldr	r2, [pc, #204]	@ (8005390 <USB_SetTurnaroundTime+0x128>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d306      	bcc.n	80052d4 <USB_SetTurnaroundTime+0x6c>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4a32      	ldr	r2, [pc, #200]	@ (8005394 <USB_SetTurnaroundTime+0x12c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d802      	bhi.n	80052d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052ce:	230c      	movs	r3, #12
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	e041      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4a2f      	ldr	r2, [pc, #188]	@ (8005394 <USB_SetTurnaroundTime+0x12c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d906      	bls.n	80052ea <USB_SetTurnaroundTime+0x82>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4a2e      	ldr	r2, [pc, #184]	@ (8005398 <USB_SetTurnaroundTime+0x130>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d802      	bhi.n	80052ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052e4:	230b      	movs	r3, #11
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e036      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005398 <USB_SetTurnaroundTime+0x130>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d906      	bls.n	8005300 <USB_SetTurnaroundTime+0x98>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	4a29      	ldr	r2, [pc, #164]	@ (800539c <USB_SetTurnaroundTime+0x134>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d802      	bhi.n	8005300 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052fa:	230a      	movs	r3, #10
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	e02b      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a26      	ldr	r2, [pc, #152]	@ (800539c <USB_SetTurnaroundTime+0x134>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d906      	bls.n	8005316 <USB_SetTurnaroundTime+0xae>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a25      	ldr	r2, [pc, #148]	@ (80053a0 <USB_SetTurnaroundTime+0x138>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d202      	bcs.n	8005316 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005310:	2309      	movs	r3, #9
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e020      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4a21      	ldr	r2, [pc, #132]	@ (80053a0 <USB_SetTurnaroundTime+0x138>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d306      	bcc.n	800532c <USB_SetTurnaroundTime+0xc4>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4a20      	ldr	r2, [pc, #128]	@ (80053a4 <USB_SetTurnaroundTime+0x13c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d802      	bhi.n	800532c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005326:	2308      	movs	r3, #8
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e015      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a1d      	ldr	r2, [pc, #116]	@ (80053a4 <USB_SetTurnaroundTime+0x13c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d906      	bls.n	8005342 <USB_SetTurnaroundTime+0xda>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a1c      	ldr	r2, [pc, #112]	@ (80053a8 <USB_SetTurnaroundTime+0x140>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d202      	bcs.n	8005342 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800533c:	2307      	movs	r3, #7
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	e00a      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005342:	2306      	movs	r3, #6
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e007      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800534e:	2309      	movs	r3, #9
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	e001      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005354:	2309      	movs	r3, #9
 8005356:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	029b      	lsls	r3, r3, #10
 800536c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005370:	431a      	orrs	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	00d8acbf 	.word	0x00d8acbf
 8005388:	00e4e1c0 	.word	0x00e4e1c0
 800538c:	00f42400 	.word	0x00f42400
 8005390:	01067380 	.word	0x01067380
 8005394:	011a499f 	.word	0x011a499f
 8005398:	01312cff 	.word	0x01312cff
 800539c:	014ca43f 	.word	0x014ca43f
 80053a0:	016e3600 	.word	0x016e3600
 80053a4:	01a6ab1f 	.word	0x01a6ab1f
 80053a8:	01e84800 	.word	0x01e84800

080053ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f043 0201 	orr.w	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d115      	bne.n	800543e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800541e:	200a      	movs	r0, #10
 8005420:	f7fb fe82 	bl	8001128 <HAL_Delay>
      ms += 10U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	330a      	adds	r3, #10
 8005428:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 f93f 	bl	80066ae <USB_GetMode>
 8005430:	4603      	mov	r3, r0
 8005432:	2b01      	cmp	r3, #1
 8005434:	d01e      	beq.n	8005474 <USB_SetCurrentMode+0x84>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2bc7      	cmp	r3, #199	@ 0xc7
 800543a:	d9f0      	bls.n	800541e <USB_SetCurrentMode+0x2e>
 800543c:	e01a      	b.n	8005474 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d115      	bne.n	8005470 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005450:	200a      	movs	r0, #10
 8005452:	f7fb fe69 	bl	8001128 <HAL_Delay>
      ms += 10U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	330a      	adds	r3, #10
 800545a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f001 f926 	bl	80066ae <USB_GetMode>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <USB_SetCurrentMode+0x84>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2bc7      	cmp	r3, #199	@ 0xc7
 800546c:	d9f0      	bls.n	8005450 <USB_SetCurrentMode+0x60>
 800546e:	e001      	b.n	8005474 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e005      	b.n	8005480 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2bc8      	cmp	r3, #200	@ 0xc8
 8005478:	d101      	bne.n	800547e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005488:	b084      	sub	sp, #16
 800548a:	b580      	push	{r7, lr}
 800548c:	b086      	sub	sp, #24
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	e009      	b.n	80054bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	3340      	adds	r3, #64	@ 0x40
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	2200      	movs	r2, #0
 80054b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	3301      	adds	r3, #1
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b0e      	cmp	r3, #14
 80054c0:	d9f2      	bls.n	80054a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d11c      	bne.n	8005504 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054d8:	f043 0302 	orr.w	r3, r3, #2
 80054dc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	639a      	str	r2, [r3, #56]	@ 0x38
 8005502:	e00b      	b.n	800551c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005508:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005514:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005522:	461a      	mov	r2, r3
 8005524:	2300      	movs	r3, #0
 8005526:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005528:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10d      	bne.n	800554c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005538:	2100      	movs	r1, #0
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f968 	bl	8005810 <USB_SetDevSpeed>
 8005540:	e008      	b.n	8005554 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005542:	2101      	movs	r1, #1
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f963 	bl	8005810 <USB_SetDevSpeed>
 800554a:	e003      	b.n	8005554 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800554c:	2103      	movs	r1, #3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f95e 	bl	8005810 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005554:	2110      	movs	r1, #16
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8fa 	bl	8005750 <USB_FlushTxFifo>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f924 	bl	80057b4 <USB_FlushRxFifo>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800557c:	461a      	mov	r2, r3
 800557e:	2300      	movs	r3, #0
 8005580:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005588:	461a      	mov	r2, r3
 800558a:	2300      	movs	r3, #0
 800558c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005594:	461a      	mov	r2, r3
 8005596:	2300      	movs	r3, #0
 8005598:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800559a:	2300      	movs	r3, #0
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	e043      	b.n	8005628 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055b6:	d118      	bne.n	80055ea <USB_DevInit+0x162>
    {
      if (i == 0U)
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ca:	461a      	mov	r2, r3
 80055cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e013      	b.n	80055fc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e0:	461a      	mov	r2, r3
 80055e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	e008      	b.n	80055fc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055f6:	461a      	mov	r2, r3
 80055f8:	2300      	movs	r3, #0
 80055fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005608:	461a      	mov	r2, r3
 800560a:	2300      	movs	r3, #0
 800560c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800561a:	461a      	mov	r2, r3
 800561c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005620:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3301      	adds	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800562c:	461a      	mov	r2, r3
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4293      	cmp	r3, r2
 8005632:	d3b5      	bcc.n	80055a0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	e043      	b.n	80056c2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800564c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005650:	d118      	bne.n	8005684 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005664:	461a      	mov	r2, r3
 8005666:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	e013      	b.n	8005696 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567a:	461a      	mov	r2, r3
 800567c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e008      	b.n	8005696 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005690:	461a      	mov	r2, r3
 8005692:	2300      	movs	r3, #0
 8005694:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a2:	461a      	mov	r2, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b4:	461a      	mov	r2, r3
 80056b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	3301      	adds	r3, #1
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056c6:	461a      	mov	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d3b5      	bcc.n	800563a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80056ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f043 0210 	orr.w	r2, r3, #16
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	4b10      	ldr	r3, [pc, #64]	@ (800574c <USB_DevInit+0x2c4>)
 800570a:	4313      	orrs	r3, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005710:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f043 0208 	orr.w	r2, r3, #8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005724:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005728:	2b01      	cmp	r3, #1
 800572a:	d107      	bne.n	800573c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005734:	f043 0304 	orr.w	r3, r3, #4
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800573c:	7dfb      	ldrb	r3, [r7, #23]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005748:	b004      	add	sp, #16
 800574a:	4770      	bx	lr
 800574c:	803c3800 	.word	0x803c3800

08005750 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3301      	adds	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800576a:	d901      	bls.n	8005770 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e01b      	b.n	80057a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	daf2      	bge.n	800575e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	019b      	lsls	r3, r3, #6
 8005780:	f043 0220 	orr.w	r2, r3, #32
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005794:	d901      	bls.n	800579a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e006      	b.n	80057a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d0f0      	beq.n	8005788 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057cc:	d901      	bls.n	80057d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e018      	b.n	8005804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	daf2      	bge.n	80057c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2210      	movs	r2, #16
 80057e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057f0:	d901      	bls.n	80057f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e006      	b.n	8005804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	2b10      	cmp	r3, #16
 8005800:	d0f0      	beq.n	80057e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005842:	b480      	push	{r7}
 8005844:	b087      	sub	sp, #28
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0306 	and.w	r3, r3, #6
 800585a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005862:	2300      	movs	r3, #0
 8005864:	75fb      	strb	r3, [r7, #23]
 8005866:	e00a      	b.n	800587e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d002      	beq.n	8005874 <USB_GetDevSpeed+0x32>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b06      	cmp	r3, #6
 8005872:	d102      	bne.n	800587a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005874:	2302      	movs	r3, #2
 8005876:	75fb      	strb	r3, [r7, #23]
 8005878:	e001      	b.n	800587e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800587a:	230f      	movs	r3, #15
 800587c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005880:	4618      	mov	r0, r3
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d13a      	bne.n	800591e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	b29b      	uxth	r3, r3
 80058c0:	68f9      	ldr	r1, [r7, #12]
 80058c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d155      	bne.n	800598c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	791b      	ldrb	r3, [r3, #4]
 80058fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	059b      	lsls	r3, r3, #22
 8005902:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005904:	4313      	orrs	r3, r2
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	e036      	b.n	800598c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005924:	69da      	ldr	r2, [r3, #28]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	2101      	movs	r1, #1
 8005930:	fa01 f303 	lsl.w	r3, r1, r3
 8005934:	041b      	lsls	r3, r3, #16
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800593c:	4313      	orrs	r3, r2
 800593e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d11a      	bne.n	800598c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	791b      	ldrb	r3, [r3, #4]
 8005970:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005972:	430b      	orrs	r3, r1
 8005974:	4313      	orrs	r3, r2
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800598a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d161      	bne.n	8005a7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059ce:	d11f      	bne.n	8005a10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	2101      	movs	r1, #1
 8005a22:	fa01 f303 	lsl.w	r3, r1, r3
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a30:	4013      	ands	r3, r2
 8005a32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a54:	4013      	ands	r3, r2
 8005a56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	0159      	lsls	r1, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	440b      	add	r3, r1
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a72:	4619      	mov	r1, r3
 8005a74:	4b35      	ldr	r3, [pc, #212]	@ (8005b4c <USB_DeactivateEndpoint+0x1b0>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
 8005a7a:	e060      	b.n	8005b3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a92:	d11f      	bne.n	8005ad4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ab2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ace:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	43db      	mvns	r3, r3
 8005aee:	68f9      	ldr	r1, [r7, #12]
 8005af0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005af4:	4013      	ands	r3, r2
 8005af6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	2101      	movs	r1, #1
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	041b      	lsls	r3, r3, #16
 8005b10:	43db      	mvns	r3, r3
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	0159      	lsls	r1, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	440b      	add	r3, r1
 8005b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b36:	4619      	mov	r1, r3
 8005b38:	4b05      	ldr	r3, [pc, #20]	@ (8005b50 <USB_DeactivateEndpoint+0x1b4>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	ec337800 	.word	0xec337800
 8005b50:	eff37800 	.word	0xeff37800

08005b54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	@ 0x28
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	f040 817f 	bne.w	8005e74 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d132      	bne.n	8005be4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b98:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b9c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ba0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bdc:	0cdb      	lsrs	r3, r3, #19
 8005bde:	04db      	lsls	r3, r3, #19
 8005be0:	6113      	str	r3, [r2, #16]
 8005be2:	e097      	b.n	8005d14 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bfe:	0cdb      	lsrs	r3, r3, #19
 8005c00:	04db      	lsls	r3, r3, #19
 8005c02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c1e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c22:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c26:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d11a      	bne.n	8005c64 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d903      	bls.n	8005c42 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c60:	6113      	str	r3, [r2, #16]
 8005c62:	e044      	b.n	8005cee <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	1e5a      	subs	r2, r3, #1
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c78:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	8afb      	ldrh	r3, [r7, #22]
 8005c8a:	04d9      	lsls	r1, r3, #19
 8005c8c:	4ba4      	ldr	r3, [pc, #656]	@ (8005f20 <USB_EPStartXfer+0x3cc>)
 8005c8e:	400b      	ands	r3, r1
 8005c90:	69b9      	ldr	r1, [r7, #24]
 8005c92:	0148      	lsls	r0, r1, #5
 8005c94:	69f9      	ldr	r1, [r7, #28]
 8005c96:	4401      	add	r1, r0
 8005c98:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	791b      	ldrb	r3, [r3, #4]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d122      	bne.n	8005cee <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	69fa      	ldr	r2, [r7, #28]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005cc6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd4:	691a      	ldr	r2, [r3, #16]
 8005cd6:	8afb      	ldrh	r3, [r7, #22]
 8005cd8:	075b      	lsls	r3, r3, #29
 8005cda:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005cde:	69b9      	ldr	r1, [r7, #24]
 8005ce0:	0148      	lsls	r0, r1, #5
 8005ce2:	69f9      	ldr	r1, [r7, #28]
 8005ce4:	4401      	add	r1, r0
 8005ce6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005cea:	4313      	orrs	r3, r2
 8005cec:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	0148      	lsls	r0, r1, #5
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	4401      	add	r1, r0
 8005d0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d10:	4313      	orrs	r3, r2
 8005d12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d14b      	bne.n	8005db2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2e:	461a      	mov	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	791b      	ldrb	r3, [r3, #4]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d128      	bne.n	8005d90 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d110      	bne.n	8005d70 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e00f      	b.n	8005d90 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d8e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005daa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	e166      	b.n	8006080 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dcc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005dd0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	791b      	ldrb	r3, [r3, #4]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d015      	beq.n	8005e06 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 814e 	beq.w	8006080 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	2101      	movs	r1, #1
 8005df6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfa:	69f9      	ldr	r1, [r7, #28]
 8005dfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e00:	4313      	orrs	r3, r2
 8005e02:	634b      	str	r3, [r1, #52]	@ 0x34
 8005e04:	e13c      	b.n	8006080 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d110      	bne.n	8005e38 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e00f      	b.n	8005e58 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e56:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	68d9      	ldr	r1, [r3, #12]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	781a      	ldrb	r2, [r3, #0]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	b298      	uxth	r0, r3
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 f9b9 	bl	80061e4 <USB_WritePacket>
 8005e72:	e105      	b.n	8006080 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e8e:	0cdb      	lsrs	r3, r3, #19
 8005e90:	04db      	lsls	r3, r3, #19
 8005e92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005eb2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005eb6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d132      	bne.n	8005f24 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eec:	69b9      	ldr	r1, [r7, #24]
 8005eee:	0148      	lsls	r0, r1, #5
 8005ef0:	69f9      	ldr	r1, [r7, #28]
 8005ef2:	4401      	add	r1, r0
 8005ef4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	0151      	lsls	r1, r2, #5
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	440a      	add	r2, r1
 8005f12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f1a:	6113      	str	r3, [r2, #16]
 8005f1c:	e062      	b.n	8005fe4 <USB_EPStartXfer+0x490>
 8005f1e:	bf00      	nop
 8005f20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d123      	bne.n	8005f74 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f42:	69b9      	ldr	r1, [r7, #24]
 8005f44:	0148      	lsls	r0, r1, #5
 8005f46:	69f9      	ldr	r1, [r7, #28]
 8005f48:	4401      	add	r1, r0
 8005f4a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f70:	6113      	str	r3, [r2, #16]
 8005f72:	e037      	b.n	8005fe4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	1e5a      	subs	r2, r3, #1
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f88:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	8afa      	ldrh	r2, [r7, #22]
 8005f90:	fb03 f202 	mul.w	r2, r3, r2
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	8afb      	ldrh	r3, [r7, #22]
 8005fa8:	04d9      	lsls	r1, r3, #19
 8005faa:	4b38      	ldr	r3, [pc, #224]	@ (800608c <USB_EPStartXfer+0x538>)
 8005fac:	400b      	ands	r3, r1
 8005fae:	69b9      	ldr	r1, [r7, #24]
 8005fb0:	0148      	lsls	r0, r1, #5
 8005fb2:	69f9      	ldr	r1, [r7, #28]
 8005fb4:	4401      	add	r1, r0
 8005fb6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd4:	69b9      	ldr	r1, [r7, #24]
 8005fd6:	0148      	lsls	r0, r1, #5
 8005fd8:	69f9      	ldr	r1, [r7, #28]
 8005fda:	4401      	add	r1, r0
 8005fdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d10d      	bne.n	8006006 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	68d9      	ldr	r1, [r3, #12]
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006002:	460a      	mov	r2, r1
 8006004:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	791b      	ldrb	r3, [r3, #4]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d128      	bne.n	8006060 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d110      	bne.n	8006040 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	69fa      	ldr	r2, [r7, #28]
 8006032:	440a      	add	r2, r1
 8006034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006038:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e00f      	b.n	8006060 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800605a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800605e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800607a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800607e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	1ff80000 	.word	0x1ff80000

08006090 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d14a      	bne.n	8006144 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060c6:	f040 8086 	bne.w	80061d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	7812      	ldrb	r2, [r2, #0]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	7812      	ldrb	r2, [r2, #0]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800610c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006110:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800611e:	4293      	cmp	r3, r2
 8006120:	d902      	bls.n	8006128 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	75fb      	strb	r3, [r7, #23]
          break;
 8006126:	e056      	b.n	80061d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800613c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006140:	d0e7      	beq.n	8006112 <USB_EPStopXfer+0x82>
 8006142:	e048      	b.n	80061d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800615c:	d13b      	bne.n	80061d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	7812      	ldrb	r2, [r2, #0]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800617c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006180:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	7812      	ldrb	r2, [r2, #0]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3301      	adds	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d902      	bls.n	80061bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	75fb      	strb	r3, [r7, #23]
          break;
 80061ba:	e00c      	b.n	80061d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061d4:	d0e7      	beq.n	80061a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b089      	sub	sp, #36	@ 0x24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4611      	mov	r1, r2
 80061f0:	461a      	mov	r2, r3
 80061f2:	460b      	mov	r3, r1
 80061f4:	71fb      	strb	r3, [r7, #7]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006202:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006206:	2b00      	cmp	r3, #0
 8006208:	d123      	bne.n	8006252 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800620a:	88bb      	ldrh	r3, [r7, #4]
 800620c:	3303      	adds	r3, #3
 800620e:	089b      	lsrs	r3, r3, #2
 8006210:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006212:	2300      	movs	r3, #0
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e018      	b.n	800624a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	031a      	lsls	r2, r3, #12
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006224:	461a      	mov	r2, r3
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3301      	adds	r3, #1
 8006236:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	3301      	adds	r3, #1
 8006242:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	3301      	adds	r3, #1
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	429a      	cmp	r2, r3
 8006250:	d3e2      	bcc.n	8006218 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3724      	adds	r7, #36	@ 0x24
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006260:	b480      	push	{r7}
 8006262:	b08b      	sub	sp, #44	@ 0x2c
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	089b      	lsrs	r3, r3, #2
 800627a:	b29b      	uxth	r3, r3
 800627c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800627e:	88fb      	ldrh	r3, [r7, #6]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	623b      	str	r3, [r7, #32]
 800628a:	e014      	b.n	80062b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	601a      	str	r2, [r3, #0]
    pDest++;
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	3301      	adds	r3, #1
 800629c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	3301      	adds	r3, #1
 80062a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	3301      	adds	r3, #1
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	3301      	adds	r3, #1
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	3301      	adds	r3, #1
 80062b4:	623b      	str	r3, [r7, #32]
 80062b6:	6a3a      	ldr	r2, [r7, #32]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d3e6      	bcc.n	800628c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062be:	8bfb      	ldrh	r3, [r7, #30]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01e      	beq.n	8006302 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ce:	461a      	mov	r2, r3
 80062d0:	f107 0310 	add.w	r3, r7, #16
 80062d4:	6812      	ldr	r2, [r2, #0]
 80062d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	701a      	strb	r2, [r3, #0]
      i++;
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	3301      	adds	r3, #1
 80062ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	3301      	adds	r3, #1
 80062f4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80062f6:	8bfb      	ldrh	r3, [r7, #30]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062fc:	8bfb      	ldrh	r3, [r7, #30]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1ea      	bne.n	80062d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006304:	4618      	mov	r0, r3
 8006306:	372c      	adds	r7, #44	@ 0x2c
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d12c      	bne.n	8006386 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	db12      	blt.n	8006364 <USB_EPSetStall+0x54>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00f      	beq.n	8006364 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800635e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006362:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	440a      	add	r2, r1
 800637a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800637e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	e02b      	b.n	80063de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	db12      	blt.n	80063be <USB_EPSetStall+0xae>
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00f      	beq.n	80063be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d128      	bne.n	800645a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	440a      	add	r2, r1
 800641e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006422:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006426:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	791b      	ldrb	r3, [r3, #4]
 800642c:	2b03      	cmp	r3, #3
 800642e:	d003      	beq.n	8006438 <USB_EPClearStall+0x4c>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	791b      	ldrb	r3, [r3, #4]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d138      	bne.n	80064aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e027      	b.n	80064aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	0151      	lsls	r1, r2, #5
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	440a      	add	r2, r1
 8006470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006474:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006478:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	791b      	ldrb	r3, [r3, #4]
 800647e:	2b03      	cmp	r3, #3
 8006480:	d003      	beq.n	800648a <USB_EPClearStall+0x9e>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	791b      	ldrb	r3, [r3, #4]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d10f      	bne.n	80064aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80064da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80064ec:	68f9      	ldr	r1, [r7, #12]
 80064ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064f2:	4313      	orrs	r3, r2
 80064f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006532:	f023 0302 	bic.w	r3, r3, #2
 8006536:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006560:	f023 0303 	bic.w	r3, r3, #3
 8006564:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006574:	f043 0302 	orr.w	r3, r3, #2
 8006578:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4013      	ands	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065a0:	68fb      	ldr	r3, [r7, #12]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	4013      	ands	r3, r2
 80065d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	0c1b      	lsrs	r3, r3, #16
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	4013      	ands	r3, r2
 8006604:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	b29b      	uxth	r3, r3
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4013      	ands	r3, r2
 8006642:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006644:	68bb      	ldr	r3, [r7, #8]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006652:	b480      	push	{r7}
 8006654:	b087      	sub	sp, #28
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	460b      	mov	r3, r1
 800665c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006674:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	f003 030f 	and.w	r3, r3, #15
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	fa22 f303 	lsr.w	r3, r2, r3
 8006682:	01db      	lsls	r3, r3, #7
 8006684:	b2db      	uxtb	r3, r3
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800668c:	78fb      	ldrb	r3, [r7, #3]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4013      	ands	r3, r2
 800669e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066a0:	68bb      	ldr	r3, [r7, #8]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f003 0301 	and.w	r3, r3, #1
}
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066e4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80066e8:	f023 0307 	bic.w	r3, r3, #7
 80066ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006700:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	460b      	mov	r3, r1
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	333c      	adds	r3, #60	@ 0x3c
 8006726:	3304      	adds	r3, #4
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4a26      	ldr	r2, [pc, #152]	@ (80067c8 <USB_EP0_OutStart+0xb8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d90a      	bls.n	800674a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006740:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006744:	d101      	bne.n	800674a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	e037      	b.n	80067ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006750:	461a      	mov	r2, r3
 8006752:	2300      	movs	r3, #0
 8006754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006764:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006768:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006778:	f043 0318 	orr.w	r3, r3, #24
 800677c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800678c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006790:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006792:	7afb      	ldrb	r3, [r7, #11]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d10f      	bne.n	80067b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067b2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80067b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	4f54300a 	.word	0x4f54300a

080067cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067e4:	d901      	bls.n	80067ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e01b      	b.n	8006822 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	daf2      	bge.n	80067d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f043 0201 	orr.w	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800680e:	d901      	bls.n	8006814 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e006      	b.n	8006822 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b01      	cmp	r3, #1
 800681e:	d0f0      	beq.n	8006802 <USB_CoreReset+0x36>

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800683c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006840:	f002 fc6c 	bl	800911c <USBD_static_malloc>
 8006844:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d109      	bne.n	8006860 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	32b0      	adds	r2, #176	@ 0xb0
 8006856:	2100      	movs	r1, #0
 8006858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800685c:	2302      	movs	r3, #2
 800685e:	e0d4      	b.n	8006a0a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006860:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006864:	2100      	movs	r1, #0
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f002 fc9c 	bl	80091a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	32b0      	adds	r2, #176	@ 0xb0
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	32b0      	adds	r2, #176	@ 0xb0
 8006886:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	7c1b      	ldrb	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d138      	bne.n	800690a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006898:	4b5e      	ldr	r3, [pc, #376]	@ (8006a14 <USBD_CDC_Init+0x1e4>)
 800689a:	7819      	ldrb	r1, [r3, #0]
 800689c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068a0:	2202      	movs	r2, #2
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f002 fb17 	bl	8008ed6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006a14 <USBD_CDC_Init+0x1e4>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	f003 020f 	and.w	r2, r3, #15
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	4613      	mov	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	440b      	add	r3, r1
 80068bc:	3324      	adds	r3, #36	@ 0x24
 80068be:	2201      	movs	r2, #1
 80068c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068c2:	4b55      	ldr	r3, [pc, #340]	@ (8006a18 <USBD_CDC_Init+0x1e8>)
 80068c4:	7819      	ldrb	r1, [r3, #0]
 80068c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068ca:	2202      	movs	r2, #2
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f002 fb02 	bl	8008ed6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068d2:	4b51      	ldr	r3, [pc, #324]	@ (8006a18 <USBD_CDC_Init+0x1e8>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 020f 	and.w	r2, r3, #15
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80068ea:	2201      	movs	r2, #1
 80068ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80068ee:	4b4b      	ldr	r3, [pc, #300]	@ (8006a1c <USBD_CDC_Init+0x1ec>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	f003 020f 	and.w	r2, r3, #15
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	3326      	adds	r3, #38	@ 0x26
 8006904:	2210      	movs	r2, #16
 8006906:	801a      	strh	r2, [r3, #0]
 8006908:	e035      	b.n	8006976 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800690a:	4b42      	ldr	r3, [pc, #264]	@ (8006a14 <USBD_CDC_Init+0x1e4>)
 800690c:	7819      	ldrb	r1, [r3, #0]
 800690e:	2340      	movs	r3, #64	@ 0x40
 8006910:	2202      	movs	r2, #2
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f002 fadf 	bl	8008ed6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006918:	4b3e      	ldr	r3, [pc, #248]	@ (8006a14 <USBD_CDC_Init+0x1e4>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	3324      	adds	r3, #36	@ 0x24
 800692e:	2201      	movs	r2, #1
 8006930:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006932:	4b39      	ldr	r3, [pc, #228]	@ (8006a18 <USBD_CDC_Init+0x1e8>)
 8006934:	7819      	ldrb	r1, [r3, #0]
 8006936:	2340      	movs	r3, #64	@ 0x40
 8006938:	2202      	movs	r2, #2
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f002 facb 	bl	8008ed6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006940:	4b35      	ldr	r3, [pc, #212]	@ (8006a18 <USBD_CDC_Init+0x1e8>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 020f 	and.w	r2, r3, #15
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	440b      	add	r3, r1
 8006954:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006958:	2201      	movs	r2, #1
 800695a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800695c:	4b2f      	ldr	r3, [pc, #188]	@ (8006a1c <USBD_CDC_Init+0x1ec>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	f003 020f 	and.w	r2, r3, #15
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	3326      	adds	r3, #38	@ 0x26
 8006972:	2210      	movs	r2, #16
 8006974:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006976:	4b29      	ldr	r3, [pc, #164]	@ (8006a1c <USBD_CDC_Init+0x1ec>)
 8006978:	7819      	ldrb	r1, [r3, #0]
 800697a:	2308      	movs	r3, #8
 800697c:	2203      	movs	r2, #3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f002 faa9 	bl	8008ed6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006984:	4b25      	ldr	r3, [pc, #148]	@ (8006a1c <USBD_CDC_Init+0x1ec>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f003 020f 	and.w	r2, r3, #15
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	440b      	add	r3, r1
 8006998:	3324      	adds	r3, #36	@ 0x24
 800699a:	2201      	movs	r2, #1
 800699c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	33b0      	adds	r3, #176	@ 0xb0
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80069d4:	2302      	movs	r3, #2
 80069d6:	e018      	b.n	8006a0a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	7c1b      	ldrb	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <USBD_CDC_Init+0x1e8>)
 80069e2:	7819      	ldrb	r1, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f002 fb60 	bl	80090b4 <USBD_LL_PrepareReceive>
 80069f4:	e008      	b.n	8006a08 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069f6:	4b08      	ldr	r3, [pc, #32]	@ (8006a18 <USBD_CDC_Init+0x1e8>)
 80069f8:	7819      	ldrb	r1, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a00:	2340      	movs	r3, #64	@ 0x40
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f002 fb56 	bl	80090b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000093 	.word	0x20000093
 8006a18:	20000094 	.word	0x20000094
 8006a1c:	20000095 	.word	0x20000095

08006a20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8006b18 <USBD_CDC_DeInit+0xf8>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f002 fa75 	bl	8008f22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a38:	4b37      	ldr	r3, [pc, #220]	@ (8006b18 <USBD_CDC_DeInit+0xf8>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	f003 020f 	and.w	r2, r3, #15
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	3324      	adds	r3, #36	@ 0x24
 8006a4e:	2200      	movs	r2, #0
 8006a50:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a52:	4b32      	ldr	r3, [pc, #200]	@ (8006b1c <USBD_CDC_DeInit+0xfc>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f002 fa62 	bl	8008f22 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b1c <USBD_CDC_DeInit+0xfc>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	f003 020f 	and.w	r2, r3, #15
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a76:	2200      	movs	r2, #0
 8006a78:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006a7a:	4b29      	ldr	r3, [pc, #164]	@ (8006b20 <USBD_CDC_DeInit+0x100>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f002 fa4e 	bl	8008f22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006a86:	4b26      	ldr	r3, [pc, #152]	@ (8006b20 <USBD_CDC_DeInit+0x100>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	f003 020f 	and.w	r2, r3, #15
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	3324      	adds	r3, #36	@ 0x24
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8006b20 <USBD_CDC_DeInit+0x100>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 020f 	and.w	r2, r3, #15
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	3326      	adds	r3, #38	@ 0x26
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	32b0      	adds	r2, #176	@ 0xb0
 8006ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01f      	beq.n	8006b0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	33b0      	adds	r3, #176	@ 0xb0
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	32b0      	adds	r2, #176	@ 0xb0
 8006aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f002 fb22 	bl	8009138 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	32b0      	adds	r2, #176	@ 0xb0
 8006afe:	2100      	movs	r1, #0
 8006b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20000093 	.word	0x20000093
 8006b1c:	20000094 	.word	0x20000094
 8006b20:	20000095 	.word	0x20000095

08006b24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	32b0      	adds	r2, #176	@ 0xb0
 8006b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0bf      	b.n	8006cd4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d050      	beq.n	8006c02 <USBD_CDC_Setup+0xde>
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	f040 80af 	bne.w	8006cc4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	88db      	ldrh	r3, [r3, #6]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d03a      	beq.n	8006be4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	b25b      	sxtb	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	da1b      	bge.n	8006bb0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	33b0      	adds	r3, #176	@ 0xb0
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006b8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	88d2      	ldrh	r2, [r2, #6]
 8006b94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	88db      	ldrh	r3, [r3, #6]
 8006b9a:	2b07      	cmp	r3, #7
 8006b9c:	bf28      	it	cs
 8006b9e:	2307      	movcs	r3, #7
 8006ba0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	89fa      	ldrh	r2, [r7, #14]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 fd53 	bl	8008654 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006bae:	e090      	b.n	8006cd2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	785a      	ldrb	r2, [r3, #1]
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	88db      	ldrh	r3, [r3, #6]
 8006bbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8006bc0:	d803      	bhi.n	8006bca <USBD_CDC_Setup+0xa6>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	88db      	ldrh	r3, [r3, #6]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	e000      	b.n	8006bcc <USBD_CDC_Setup+0xa8>
 8006bca:	2240      	movs	r2, #64	@ 0x40
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006bd2:	6939      	ldr	r1, [r7, #16]
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 fd65 	bl	80086ac <USBD_CtlPrepareRx>
      break;
 8006be2:	e076      	b.n	8006cd2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	33b0      	adds	r3, #176	@ 0xb0
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	7850      	ldrb	r0, [r2, #1]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	4798      	blx	r3
      break;
 8006c00:	e067      	b.n	8006cd2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	2b0b      	cmp	r3, #11
 8006c08:	d851      	bhi.n	8006cae <USBD_CDC_Setup+0x18a>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <USBD_CDC_Setup+0xec>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c41 	.word	0x08006c41
 8006c14:	08006cbd 	.word	0x08006cbd
 8006c18:	08006caf 	.word	0x08006caf
 8006c1c:	08006caf 	.word	0x08006caf
 8006c20:	08006caf 	.word	0x08006caf
 8006c24:	08006caf 	.word	0x08006caf
 8006c28:	08006caf 	.word	0x08006caf
 8006c2c:	08006caf 	.word	0x08006caf
 8006c30:	08006caf 	.word	0x08006caf
 8006c34:	08006caf 	.word	0x08006caf
 8006c38:	08006c6b 	.word	0x08006c6b
 8006c3c:	08006c95 	.word	0x08006c95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d107      	bne.n	8006c5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c4c:	f107 030a 	add.w	r3, r7, #10
 8006c50:	2202      	movs	r2, #2
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fcfd 	bl	8008654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c5a:	e032      	b.n	8006cc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 fc7b 	bl	800855a <USBD_CtlError>
            ret = USBD_FAIL;
 8006c64:	2303      	movs	r3, #3
 8006c66:	75fb      	strb	r3, [r7, #23]
          break;
 8006c68:	e02b      	b.n	8006cc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d107      	bne.n	8006c86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c76:	f107 030d 	add.w	r3, r7, #13
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fce8 	bl	8008654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c84:	e01d      	b.n	8006cc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 fc66 	bl	800855a <USBD_CtlError>
            ret = USBD_FAIL;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	75fb      	strb	r3, [r7, #23]
          break;
 8006c92:	e016      	b.n	8006cc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d00f      	beq.n	8006cc0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fc59 	bl	800855a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cac:	e008      	b.n	8006cc0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fc52 	bl	800855a <USBD_CtlError>
          ret = USBD_FAIL;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cba:	e002      	b.n	8006cc2 <USBD_CDC_Setup+0x19e>
          break;
 8006cbc:	bf00      	nop
 8006cbe:	e008      	b.n	8006cd2 <USBD_CDC_Setup+0x1ae>
          break;
 8006cc0:	bf00      	nop
      }
      break;
 8006cc2:	e006      	b.n	8006cd2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 fc47 	bl	800855a <USBD_CtlError>
      ret = USBD_FAIL;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006cee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	32b0      	adds	r2, #176	@ 0xb0
 8006cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e065      	b.n	8006dd2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	32b0      	adds	r2, #176	@ 0xb0
 8006d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	f003 020f 	and.w	r2, r3, #15
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	440b      	add	r3, r1
 8006d28:	3318      	adds	r3, #24
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d02f      	beq.n	8006d90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	f003 020f 	and.w	r2, r3, #15
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	440b      	add	r3, r1
 8006d42:	3318      	adds	r3, #24
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	78fb      	ldrb	r3, [r7, #3]
 8006d48:	f003 010f 	and.w	r1, r3, #15
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	440b      	add	r3, r1
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4403      	add	r3, r0
 8006d58:	331c      	adds	r3, #28
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d60:	fb01 f303 	mul.w	r3, r1, r3
 8006d64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d112      	bne.n	8006d90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006d6a:	78fb      	ldrb	r3, [r7, #3]
 8006d6c:	f003 020f 	and.w	r2, r3, #15
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3318      	adds	r3, #24
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d82:	78f9      	ldrb	r1, [r7, #3]
 8006d84:	2300      	movs	r3, #0
 8006d86:	2200      	movs	r2, #0
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f002 f972 	bl	8009072 <USBD_LL_Transmit>
 8006d8e:	e01f      	b.n	8006dd0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	33b0      	adds	r3, #176	@ 0xb0
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d010      	beq.n	8006dd0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	33b0      	adds	r3, #176	@ 0xb0
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006dcc:	78fa      	ldrb	r2, [r7, #3]
 8006dce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	460b      	mov	r3, r1
 8006de4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	32b0      	adds	r2, #176	@ 0xb0
 8006df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	32b0      	adds	r2, #176	@ 0xb0
 8006e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e01a      	b.n	8006e42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e0c:	78fb      	ldrb	r3, [r7, #3]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f002 f970 	bl	80090f6 <USBD_LL_GetRxDataSize>
 8006e16:	4602      	mov	r2, r0
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	33b0      	adds	r3, #176	@ 0xb0
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	32b0      	adds	r2, #176	@ 0xb0
 8006e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e024      	b.n	8006eb6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	33b0      	adds	r3, #176	@ 0xb0
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d019      	beq.n	8006eb4 <USBD_CDC_EP0_RxReady+0x6a>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006e86:	2bff      	cmp	r3, #255	@ 0xff
 8006e88:	d014      	beq.n	8006eb4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	33b0      	adds	r3, #176	@ 0xb0
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006ea2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006eaa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	22ff      	movs	r2, #255	@ 0xff
 8006eb0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ec8:	2182      	movs	r1, #130	@ 0x82
 8006eca:	4818      	ldr	r0, [pc, #96]	@ (8006f2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ecc:	f000 fd0f 	bl	80078ee <USBD_GetEpDesc>
 8006ed0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	4815      	ldr	r0, [pc, #84]	@ (8006f2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ed6:	f000 fd0a 	bl	80078ee <USBD_GetEpDesc>
 8006eda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006edc:	2181      	movs	r1, #129	@ 0x81
 8006ede:	4813      	ldr	r0, [pc, #76]	@ (8006f2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ee0:	f000 fd05 	bl	80078ee <USBD_GetEpDesc>
 8006ee4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2210      	movs	r2, #16
 8006ef0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d006      	beq.n	8006f06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f00:	711a      	strb	r2, [r3, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d006      	beq.n	8006f1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f14:	711a      	strb	r2, [r3, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2243      	movs	r2, #67	@ 0x43
 8006f1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f20:	4b02      	ldr	r3, [pc, #8]	@ (8006f2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20000050 	.word	0x20000050

08006f30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f38:	2182      	movs	r1, #130	@ 0x82
 8006f3a:	4818      	ldr	r0, [pc, #96]	@ (8006f9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f3c:	f000 fcd7 	bl	80078ee <USBD_GetEpDesc>
 8006f40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f42:	2101      	movs	r1, #1
 8006f44:	4815      	ldr	r0, [pc, #84]	@ (8006f9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f46:	f000 fcd2 	bl	80078ee <USBD_GetEpDesc>
 8006f4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f4c:	2181      	movs	r1, #129	@ 0x81
 8006f4e:	4813      	ldr	r0, [pc, #76]	@ (8006f9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f50:	f000 fccd 	bl	80078ee <USBD_GetEpDesc>
 8006f54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2210      	movs	r2, #16
 8006f60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	711a      	strb	r2, [r3, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f042 0202 	orr.w	r2, r2, #2
 8006f74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d006      	beq.n	8006f8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	711a      	strb	r2, [r3, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f042 0202 	orr.w	r2, r2, #2
 8006f88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2243      	movs	r2, #67	@ 0x43
 8006f8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f90:	4b02      	ldr	r3, [pc, #8]	@ (8006f9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000050 	.word	0x20000050

08006fa0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fa8:	2182      	movs	r1, #130	@ 0x82
 8006faa:	4818      	ldr	r0, [pc, #96]	@ (800700c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fac:	f000 fc9f 	bl	80078ee <USBD_GetEpDesc>
 8006fb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	4815      	ldr	r0, [pc, #84]	@ (800700c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fb6:	f000 fc9a 	bl	80078ee <USBD_GetEpDesc>
 8006fba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fbc:	2181      	movs	r1, #129	@ 0x81
 8006fbe:	4813      	ldr	r0, [pc, #76]	@ (800700c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fc0:	f000 fc95 	bl	80078ee <USBD_GetEpDesc>
 8006fc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2210      	movs	r2, #16
 8006fd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d006      	beq.n	8006fe6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fe0:	711a      	strb	r2, [r3, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d006      	beq.n	8006ffa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ff4:	711a      	strb	r2, [r3, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2243      	movs	r2, #67	@ 0x43
 8006ffe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007000:	4b02      	ldr	r3, [pc, #8]	@ (800700c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000050 	.word	0x20000050

08007010 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	220a      	movs	r2, #10
 800701c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800701e:	4b03      	ldr	r3, [pc, #12]	@ (800702c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	2000000c 	.word	0x2000000c

08007030 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007040:	2303      	movs	r3, #3
 8007042:	e009      	b.n	8007058 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	33b0      	adds	r3, #176	@ 0xb0
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	32b0      	adds	r2, #176	@ 0xb0
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007086:	2303      	movs	r3, #3
 8007088:	e008      	b.n	800709c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	371c      	adds	r7, #28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	32b0      	adds	r2, #176	@ 0xb0
 80070bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e004      	b.n	80070d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
	...

080070e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	32b0      	adds	r2, #176	@ 0xb0
 80070f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	32b0      	adds	r2, #176	@ 0xb0
 8007106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800710e:	2303      	movs	r3, #3
 8007110:	e018      	b.n	8007144 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	7c1b      	ldrb	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800711a:	4b0c      	ldr	r3, [pc, #48]	@ (800714c <USBD_CDC_ReceivePacket+0x68>)
 800711c:	7819      	ldrb	r1, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007124:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 ffc3 	bl	80090b4 <USBD_LL_PrepareReceive>
 800712e:	e008      	b.n	8007142 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007130:	4b06      	ldr	r3, [pc, #24]	@ (800714c <USBD_CDC_ReceivePacket+0x68>)
 8007132:	7819      	ldrb	r1, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800713a:	2340      	movs	r3, #64	@ 0x40
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 ffb9 	bl	80090b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20000094 	.word	0x20000094

08007150 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	e01f      	b.n	80071a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	79fa      	ldrb	r2, [r7, #7]
 800719a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f001 fe33 	bl	8008e08 <USBD_LL_Init>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e025      	b.n	8007214 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	32ae      	adds	r2, #174	@ 0xae
 80071da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00f      	beq.n	8007204 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	32ae      	adds	r2, #174	@ 0xae
 80071ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	f107 020e 	add.w	r2, r7, #14
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	4602      	mov	r2, r0
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f001 fe3b 	bl	8008ea0 <USBD_LL_Start>
 800722a:	4603      	mov	r3, r0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800723c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	460b      	mov	r3, r1
 8007254:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007260:	2b00      	cmp	r3, #0
 8007262:	d009      	beq.n	8007278 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	78fa      	ldrb	r2, [r7, #3]
 800726e:	4611      	mov	r1, r2
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	4798      	blx	r3
 8007274:	4603      	mov	r3, r0
 8007276:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007278:	7bfb      	ldrb	r3, [r7, #15]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	78fa      	ldrb	r2, [r7, #3]
 800729c:	4611      	mov	r1, r2
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80072a8:	2303      	movs	r3, #3
 80072aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 f90c 	bl	80084e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80072dc:	461a      	mov	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d01a      	beq.n	8007328 <USBD_LL_SetupStage+0x72>
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d822      	bhi.n	800733c <USBD_LL_SetupStage+0x86>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <USBD_LL_SetupStage+0x4a>
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d00a      	beq.n	8007314 <USBD_LL_SetupStage+0x5e>
 80072fe:	e01d      	b.n	800733c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fb63 	bl	80079d4 <USBD_StdDevReq>
 800730e:	4603      	mov	r3, r0
 8007310:	73fb      	strb	r3, [r7, #15]
      break;
 8007312:	e020      	b.n	8007356 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fbcb 	bl	8007ab8 <USBD_StdItfReq>
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]
      break;
 8007326:	e016      	b.n	8007356 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fc2d 	bl	8007b90 <USBD_StdEPReq>
 8007336:	4603      	mov	r3, r0
 8007338:	73fb      	strb	r3, [r7, #15]
      break;
 800733a:	e00c      	b.n	8007356 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007342:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007346:	b2db      	uxtb	r3, r3
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 fe08 	bl	8008f60 <USBD_LL_StallEP>
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]
      break;
 8007354:	bf00      	nop
  }

  return ret;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	460b      	mov	r3, r1
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d16e      	bne.n	8007456 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800737e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007386:	2b03      	cmp	r3, #3
 8007388:	f040 8098 	bne.w	80074bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	429a      	cmp	r2, r3
 8007396:	d913      	bls.n	80073c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	1ad2      	subs	r2, r2, r3
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	4293      	cmp	r3, r2
 80073b0:	bf28      	it	cs
 80073b2:	4613      	movcs	r3, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f001 f994 	bl	80086e6 <USBD_CtlContinueRx>
 80073be:	e07d      	b.n	80074bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073c6:	f003 031f 	and.w	r3, r3, #31
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d014      	beq.n	80073f8 <USBD_LL_DataOutStage+0x98>
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d81d      	bhi.n	800740e <USBD_LL_DataOutStage+0xae>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <USBD_LL_DataOutStage+0x7c>
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d003      	beq.n	80073e2 <USBD_LL_DataOutStage+0x82>
 80073da:	e018      	b.n	800740e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	75bb      	strb	r3, [r7, #22]
            break;
 80073e0:	e018      	b.n	8007414 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	4619      	mov	r1, r3
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 fa64 	bl	80078ba <USBD_CoreFindIF>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75bb      	strb	r3, [r7, #22]
            break;
 80073f6:	e00d      	b.n	8007414 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	4619      	mov	r1, r3
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 fa66 	bl	80078d4 <USBD_CoreFindEP>
 8007408:	4603      	mov	r3, r0
 800740a:	75bb      	strb	r3, [r7, #22]
            break;
 800740c:	e002      	b.n	8007414 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	75bb      	strb	r3, [r7, #22]
            break;
 8007412:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007414:	7dbb      	ldrb	r3, [r7, #22]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d119      	bne.n	800744e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b03      	cmp	r3, #3
 8007424:	d113      	bne.n	800744e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007426:	7dba      	ldrb	r2, [r7, #22]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	32ae      	adds	r2, #174	@ 0xae
 800742c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00b      	beq.n	800744e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007436:	7dba      	ldrb	r2, [r7, #22]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800743e:	7dba      	ldrb	r2, [r7, #22]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	32ae      	adds	r2, #174	@ 0xae
 8007444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f001 f95a 	bl	8008708 <USBD_CtlSendStatus>
 8007454:	e032      	b.n	80074bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007456:	7afb      	ldrb	r3, [r7, #11]
 8007458:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800745c:	b2db      	uxtb	r3, r3
 800745e:	4619      	mov	r1, r3
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 fa37 	bl	80078d4 <USBD_CoreFindEP>
 8007466:	4603      	mov	r3, r0
 8007468:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800746a:	7dbb      	ldrb	r3, [r7, #22]
 800746c:	2bff      	cmp	r3, #255	@ 0xff
 800746e:	d025      	beq.n	80074bc <USBD_LL_DataOutStage+0x15c>
 8007470:	7dbb      	ldrb	r3, [r7, #22]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d122      	bne.n	80074bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b03      	cmp	r3, #3
 8007480:	d117      	bne.n	80074b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007482:	7dba      	ldrb	r2, [r7, #22]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	32ae      	adds	r2, #174	@ 0xae
 8007488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00f      	beq.n	80074b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007492:	7dba      	ldrb	r2, [r7, #22]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800749a:	7dba      	ldrb	r2, [r7, #22]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	32ae      	adds	r2, #174	@ 0xae
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	7afa      	ldrb	r2, [r7, #11]
 80074a8:	4611      	mov	r1, r2
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	4798      	blx	r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	e000      	b.n	80074be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b086      	sub	sp, #24
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	60f8      	str	r0, [r7, #12]
 80074ce:	460b      	mov	r3, r1
 80074d0:	607a      	str	r2, [r7, #4]
 80074d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80074d4:	7afb      	ldrb	r3, [r7, #11]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d16f      	bne.n	80075ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3314      	adds	r3, #20
 80074de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d15a      	bne.n	80075a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	689a      	ldr	r2, [r3, #8]
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d914      	bls.n	8007520 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	689a      	ldr	r2, [r3, #8]
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	1ad2      	subs	r2, r2, r3
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	461a      	mov	r2, r3
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f001 f8bc 	bl	800868a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007512:	2300      	movs	r3, #0
 8007514:	2200      	movs	r2, #0
 8007516:	2100      	movs	r1, #0
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f001 fdcb 	bl	80090b4 <USBD_LL_PrepareReceive>
 800751e:	e03f      	b.n	80075a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	429a      	cmp	r2, r3
 800752a:	d11c      	bne.n	8007566 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007534:	429a      	cmp	r2, r3
 8007536:	d316      	bcc.n	8007566 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007542:	429a      	cmp	r2, r3
 8007544:	d20f      	bcs.n	8007566 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007546:	2200      	movs	r2, #0
 8007548:	2100      	movs	r1, #0
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f001 f89d 	bl	800868a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007558:	2300      	movs	r3, #0
 800755a:	2200      	movs	r2, #0
 800755c:	2100      	movs	r1, #0
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f001 fda8 	bl	80090b4 <USBD_LL_PrepareReceive>
 8007564:	e01c      	b.n	80075a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b03      	cmp	r3, #3
 8007570:	d10f      	bne.n	8007592 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007592:	2180      	movs	r1, #128	@ 0x80
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f001 fce3 	bl	8008f60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f001 f8c7 	bl	800872e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d03a      	beq.n	8007620 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f7ff fe42 	bl	8007234 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80075b8:	e032      	b.n	8007620 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80075ba:	7afb      	ldrb	r3, [r7, #11]
 80075bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	4619      	mov	r1, r3
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 f985 	bl	80078d4 <USBD_CoreFindEP>
 80075ca:	4603      	mov	r3, r0
 80075cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	2bff      	cmp	r3, #255	@ 0xff
 80075d2:	d025      	beq.n	8007620 <USBD_LL_DataInStage+0x15a>
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d122      	bne.n	8007620 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d11c      	bne.n	8007620 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80075e6:	7dfa      	ldrb	r2, [r7, #23]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	32ae      	adds	r2, #174	@ 0xae
 80075ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d014      	beq.n	8007620 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80075f6:	7dfa      	ldrb	r2, [r7, #23]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80075fe:	7dfa      	ldrb	r2, [r7, #23]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	32ae      	adds	r2, #174	@ 0xae
 8007604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	7afa      	ldrb	r2, [r7, #11]
 800760c:	4611      	mov	r1, r2
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	4798      	blx	r3
 8007612:	4603      	mov	r3, r0
 8007614:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007616:	7dbb      	ldrb	r3, [r7, #22]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800761c:	7dbb      	ldrb	r3, [r7, #22]
 800761e:	e000      	b.n	8007622 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d014      	beq.n	8007690 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00e      	beq.n	8007690 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6852      	ldr	r2, [r2, #4]
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	4611      	mov	r1, r2
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4798      	blx	r3
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007690:	2340      	movs	r3, #64	@ 0x40
 8007692:	2200      	movs	r2, #0
 8007694:	2100      	movs	r1, #0
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fc1d 	bl	8008ed6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2240      	movs	r2, #64	@ 0x40
 80076a8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076ac:	2340      	movs	r3, #64	@ 0x40
 80076ae:	2200      	movs	r2, #0
 80076b0:	2180      	movs	r1, #128	@ 0x80
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 fc0f 	bl	8008ed6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2240      	movs	r2, #64	@ 0x40
 80076c2:	621a      	str	r2, [r3, #32]

  return ret;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b083      	sub	sp, #12
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	78fa      	ldrb	r2, [r7, #3]
 80076de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d006      	beq.n	8007710 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007708:	b2da      	uxtb	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2204      	movs	r2, #4
 8007714:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b04      	cmp	r3, #4
 8007738:	d106      	bne.n	8007748 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007740:	b2da      	uxtb	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b03      	cmp	r3, #3
 8007768:	d110      	bne.n	800778c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	32ae      	adds	r2, #174	@ 0xae
 80077ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e01c      	b.n	80077f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d115      	bne.n	80077f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	32ae      	adds	r2, #174	@ 0xae
 80077ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	32ae      	adds	r2, #174	@ 0xae
 80077e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	78fa      	ldrb	r2, [r7, #3]
 80077ea:	4611      	mov	r1, r2
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	32ae      	adds	r2, #174	@ 0xae
 8007810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007818:	2303      	movs	r3, #3
 800781a:	e01c      	b.n	8007856 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b03      	cmp	r3, #3
 8007826:	d115      	bne.n	8007854 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	32ae      	adds	r2, #174	@ 0xae
 8007832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00b      	beq.n	8007854 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	32ae      	adds	r2, #174	@ 0xae
 8007846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784c:	78fa      	ldrb	r2, [r7, #3]
 800784e:	4611      	mov	r1, r2
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800785e:	b480      	push	{r7}
 8007860:	b083      	sub	sp, #12
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00e      	beq.n	80078b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6852      	ldr	r2, [r2, #4]
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	4611      	mov	r1, r2
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	4798      	blx	r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80078ac:	2303      	movs	r3, #3
 80078ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b086      	sub	sp, #24
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	885b      	ldrh	r3, [r3, #2]
 800790a:	b29b      	uxth	r3, r3
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	7812      	ldrb	r2, [r2, #0]
 8007910:	4293      	cmp	r3, r2
 8007912:	d91f      	bls.n	8007954 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800791a:	e013      	b.n	8007944 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800791c:	f107 030a 	add.w	r3, r7, #10
 8007920:	4619      	mov	r1, r3
 8007922:	6978      	ldr	r0, [r7, #20]
 8007924:	f000 f81b 	bl	800795e <USBD_GetNextDesc>
 8007928:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b05      	cmp	r3, #5
 8007930:	d108      	bne.n	8007944 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	789b      	ldrb	r3, [r3, #2]
 800793a:	78fa      	ldrb	r2, [r7, #3]
 800793c:	429a      	cmp	r2, r3
 800793e:	d008      	beq.n	8007952 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007940:	2300      	movs	r3, #0
 8007942:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	885b      	ldrh	r3, [r3, #2]
 8007948:	b29a      	uxth	r2, r3
 800794a:	897b      	ldrh	r3, [r7, #10]
 800794c:	429a      	cmp	r2, r3
 800794e:	d8e5      	bhi.n	800791c <USBD_GetEpDesc+0x2e>
 8007950:	e000      	b.n	8007954 <USBD_GetEpDesc+0x66>
          break;
 8007952:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007954:	693b      	ldr	r3, [r7, #16]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800795e:	b480      	push	{r7}
 8007960:	b085      	sub	sp, #20
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	4413      	add	r3, r2
 8007976:	b29a      	uxth	r2, r3
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007988:	68fb      	ldr	r3, [r7, #12]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007996:	b480      	push	{r7}
 8007998:	b087      	sub	sp, #28
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	3301      	adds	r3, #1
 80079ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079b4:	8a3b      	ldrh	r3, [r7, #16]
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	b21a      	sxth	r2, r3
 80079ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079be:	4313      	orrs	r3, r2
 80079c0:	b21b      	sxth	r3, r3
 80079c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80079c4:	89fb      	ldrh	r3, [r7, #14]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079ea:	2b40      	cmp	r3, #64	@ 0x40
 80079ec:	d005      	beq.n	80079fa <USBD_StdDevReq+0x26>
 80079ee:	2b40      	cmp	r3, #64	@ 0x40
 80079f0:	d857      	bhi.n	8007aa2 <USBD_StdDevReq+0xce>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00f      	beq.n	8007a16 <USBD_StdDevReq+0x42>
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	d153      	bne.n	8007aa2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	32ae      	adds	r2, #174	@ 0xae
 8007a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]
      break;
 8007a14:	e04a      	b.n	8007aac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	785b      	ldrb	r3, [r3, #1]
 8007a1a:	2b09      	cmp	r3, #9
 8007a1c:	d83b      	bhi.n	8007a96 <USBD_StdDevReq+0xc2>
 8007a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a24 <USBD_StdDevReq+0x50>)
 8007a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a24:	08007a79 	.word	0x08007a79
 8007a28:	08007a8d 	.word	0x08007a8d
 8007a2c:	08007a97 	.word	0x08007a97
 8007a30:	08007a83 	.word	0x08007a83
 8007a34:	08007a97 	.word	0x08007a97
 8007a38:	08007a57 	.word	0x08007a57
 8007a3c:	08007a4d 	.word	0x08007a4d
 8007a40:	08007a97 	.word	0x08007a97
 8007a44:	08007a6f 	.word	0x08007a6f
 8007a48:	08007a61 	.word	0x08007a61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fa3c 	bl	8007ecc <USBD_GetDescriptor>
          break;
 8007a54:	e024      	b.n	8007aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fba1 	bl	80081a0 <USBD_SetAddress>
          break;
 8007a5e:	e01f      	b.n	8007aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fbe0 	bl	8008228 <USBD_SetConfig>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]
          break;
 8007a6c:	e018      	b.n	8007aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fc83 	bl	800837c <USBD_GetConfig>
          break;
 8007a76:	e013      	b.n	8007aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fcb4 	bl	80083e8 <USBD_GetStatus>
          break;
 8007a80:	e00e      	b.n	8007aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fce3 	bl	8008450 <USBD_SetFeature>
          break;
 8007a8a:	e009      	b.n	8007aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fd07 	bl	80084a2 <USBD_ClrFeature>
          break;
 8007a94:	e004      	b.n	8007aa0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fd5e 	bl	800855a <USBD_CtlError>
          break;
 8007a9e:	bf00      	nop
      }
      break;
 8007aa0:	e004      	b.n	8007aac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fd58 	bl	800855a <USBD_CtlError>
      break;
 8007aaa:	bf00      	nop
  }

  return ret;
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop

08007ab8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ace:	2b40      	cmp	r3, #64	@ 0x40
 8007ad0:	d005      	beq.n	8007ade <USBD_StdItfReq+0x26>
 8007ad2:	2b40      	cmp	r3, #64	@ 0x40
 8007ad4:	d852      	bhi.n	8007b7c <USBD_StdItfReq+0xc4>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <USBD_StdItfReq+0x26>
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	d14e      	bne.n	8007b7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d840      	bhi.n	8007b6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	889b      	ldrh	r3, [r3, #4]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d836      	bhi.n	8007b64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	889b      	ldrh	r3, [r3, #4]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff fedb 	bl	80078ba <USBD_CoreFindIF>
 8007b04:	4603      	mov	r3, r0
 8007b06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2bff      	cmp	r3, #255	@ 0xff
 8007b0c:	d01d      	beq.n	8007b4a <USBD_StdItfReq+0x92>
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d11a      	bne.n	8007b4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b14:	7bba      	ldrb	r2, [r7, #14]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	32ae      	adds	r2, #174	@ 0xae
 8007b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00f      	beq.n	8007b44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b24:	7bba      	ldrb	r2, [r7, #14]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b2c:	7bba      	ldrb	r2, [r7, #14]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	32ae      	adds	r2, #174	@ 0xae
 8007b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	4798      	blx	r3
 8007b3e:	4603      	mov	r3, r0
 8007b40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b42:	e004      	b.n	8007b4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b44:	2303      	movs	r3, #3
 8007b46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b48:	e001      	b.n	8007b4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	88db      	ldrh	r3, [r3, #6]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d110      	bne.n	8007b78 <USBD_StdItfReq+0xc0>
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10d      	bne.n	8007b78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fdd3 	bl	8008708 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b62:	e009      	b.n	8007b78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fcf7 	bl	800855a <USBD_CtlError>
          break;
 8007b6c:	e004      	b.n	8007b78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fcf2 	bl	800855a <USBD_CtlError>
          break;
 8007b76:	e000      	b.n	8007b7a <USBD_StdItfReq+0xc2>
          break;
 8007b78:	bf00      	nop
      }
      break;
 8007b7a:	e004      	b.n	8007b86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fceb 	bl	800855a <USBD_CtlError>
      break;
 8007b84:	bf00      	nop
  }

  return ret;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	889b      	ldrh	r3, [r3, #4]
 8007ba2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bac:	2b40      	cmp	r3, #64	@ 0x40
 8007bae:	d007      	beq.n	8007bc0 <USBD_StdEPReq+0x30>
 8007bb0:	2b40      	cmp	r3, #64	@ 0x40
 8007bb2:	f200 817f 	bhi.w	8007eb4 <USBD_StdEPReq+0x324>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d02a      	beq.n	8007c10 <USBD_StdEPReq+0x80>
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	f040 817a 	bne.w	8007eb4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7ff fe85 	bl	80078d4 <USBD_CoreFindEP>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bce:	7b7b      	ldrb	r3, [r7, #13]
 8007bd0:	2bff      	cmp	r3, #255	@ 0xff
 8007bd2:	f000 8174 	beq.w	8007ebe <USBD_StdEPReq+0x32e>
 8007bd6:	7b7b      	ldrb	r3, [r7, #13]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f040 8170 	bne.w	8007ebe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007bde:	7b7a      	ldrb	r2, [r7, #13]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007be6:	7b7a      	ldrb	r2, [r7, #13]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	32ae      	adds	r2, #174	@ 0xae
 8007bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 8163 	beq.w	8007ebe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007bf8:	7b7a      	ldrb	r2, [r7, #13]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	32ae      	adds	r2, #174	@ 0xae
 8007bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c0e:	e156      	b.n	8007ebe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d008      	beq.n	8007c2a <USBD_StdEPReq+0x9a>
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	f300 8145 	bgt.w	8007ea8 <USBD_StdEPReq+0x318>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 809b 	beq.w	8007d5a <USBD_StdEPReq+0x1ca>
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d03c      	beq.n	8007ca2 <USBD_StdEPReq+0x112>
 8007c28:	e13e      	b.n	8007ea8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d002      	beq.n	8007c3c <USBD_StdEPReq+0xac>
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d016      	beq.n	8007c68 <USBD_StdEPReq+0xd8>
 8007c3a:	e02c      	b.n	8007c96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00d      	beq.n	8007c5e <USBD_StdEPReq+0xce>
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b80      	cmp	r3, #128	@ 0x80
 8007c46:	d00a      	beq.n	8007c5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 f987 	bl	8008f60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c52:	2180      	movs	r1, #128	@ 0x80
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 f983 	bl	8008f60 <USBD_LL_StallEP>
 8007c5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c5c:	e020      	b.n	8007ca0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fc7a 	bl	800855a <USBD_CtlError>
              break;
 8007c66:	e01b      	b.n	8007ca0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	885b      	ldrh	r3, [r3, #2]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10e      	bne.n	8007c8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <USBD_StdEPReq+0xfe>
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	2b80      	cmp	r3, #128	@ 0x80
 8007c7a:	d008      	beq.n	8007c8e <USBD_StdEPReq+0xfe>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	88db      	ldrh	r3, [r3, #6]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d104      	bne.n	8007c8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 f969 	bl	8008f60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fd3a 	bl	8008708 <USBD_CtlSendStatus>

              break;
 8007c94:	e004      	b.n	8007ca0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fc5e 	bl	800855a <USBD_CtlError>
              break;
 8007c9e:	bf00      	nop
          }
          break;
 8007ca0:	e107      	b.n	8007eb2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d002      	beq.n	8007cb4 <USBD_StdEPReq+0x124>
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d016      	beq.n	8007ce0 <USBD_StdEPReq+0x150>
 8007cb2:	e04b      	b.n	8007d4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00d      	beq.n	8007cd6 <USBD_StdEPReq+0x146>
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	2b80      	cmp	r3, #128	@ 0x80
 8007cbe:	d00a      	beq.n	8007cd6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 f94b 	bl	8008f60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cca:	2180      	movs	r1, #128	@ 0x80
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 f947 	bl	8008f60 <USBD_LL_StallEP>
 8007cd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cd4:	e040      	b.n	8007d58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fc3e 	bl	800855a <USBD_CtlError>
              break;
 8007cde:	e03b      	b.n	8007d58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	885b      	ldrh	r3, [r3, #2]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d136      	bne.n	8007d56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 f951 	bl	8008f9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fd03 	bl	8008708 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff fde4 	bl	80078d4 <USBD_CoreFindEP>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d10:	7b7b      	ldrb	r3, [r7, #13]
 8007d12:	2bff      	cmp	r3, #255	@ 0xff
 8007d14:	d01f      	beq.n	8007d56 <USBD_StdEPReq+0x1c6>
 8007d16:	7b7b      	ldrb	r3, [r7, #13]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d11c      	bne.n	8007d56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d1c:	7b7a      	ldrb	r2, [r7, #13]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d24:	7b7a      	ldrb	r2, [r7, #13]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	32ae      	adds	r2, #174	@ 0xae
 8007d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d010      	beq.n	8007d56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d34:	7b7a      	ldrb	r2, [r7, #13]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	32ae      	adds	r2, #174	@ 0xae
 8007d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	4798      	blx	r3
 8007d46:	4603      	mov	r3, r0
 8007d48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d4a:	e004      	b.n	8007d56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fc03 	bl	800855a <USBD_CtlError>
              break;
 8007d54:	e000      	b.n	8007d58 <USBD_StdEPReq+0x1c8>
              break;
 8007d56:	bf00      	nop
          }
          break;
 8007d58:	e0ab      	b.n	8007eb2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d002      	beq.n	8007d6c <USBD_StdEPReq+0x1dc>
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d032      	beq.n	8007dd0 <USBD_StdEPReq+0x240>
 8007d6a:	e097      	b.n	8007e9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d007      	beq.n	8007d82 <USBD_StdEPReq+0x1f2>
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b80      	cmp	r3, #128	@ 0x80
 8007d76:	d004      	beq.n	8007d82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fbed 	bl	800855a <USBD_CtlError>
                break;
 8007d80:	e091      	b.n	8007ea6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	da0b      	bge.n	8007da2 <USBD_StdEPReq+0x212>
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d90:	4613      	mov	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	3310      	adds	r3, #16
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	3304      	adds	r3, #4
 8007da0:	e00b      	b.n	8007dba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007da8:	4613      	mov	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	4413      	add	r3, r2
 8007db8:	3304      	adds	r3, #4
 8007dba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fc43 	bl	8008654 <USBD_CtlSendData>
              break;
 8007dce:	e06a      	b.n	8007ea6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	da11      	bge.n	8007dfc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	f003 020f 	and.w	r2, r3, #15
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	4613      	mov	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	3324      	adds	r3, #36	@ 0x24
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d117      	bne.n	8007e22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fbb0 	bl	800855a <USBD_CtlError>
                  break;
 8007dfa:	e054      	b.n	8007ea6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	f003 020f 	and.w	r2, r3, #15
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d104      	bne.n	8007e22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fb9d 	bl	800855a <USBD_CtlError>
                  break;
 8007e20:	e041      	b.n	8007ea6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da0b      	bge.n	8007e42 <USBD_StdEPReq+0x2b2>
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e30:	4613      	mov	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	3310      	adds	r3, #16
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3304      	adds	r3, #4
 8007e40:	e00b      	b.n	8007e5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	4413      	add	r3, r2
 8007e58:	3304      	adds	r3, #4
 8007e5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <USBD_StdEPReq+0x2d8>
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b80      	cmp	r3, #128	@ 0x80
 8007e66:	d103      	bne.n	8007e70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	e00e      	b.n	8007e8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 f8b1 	bl	8008fdc <USBD_LL_IsStallEP>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2201      	movs	r2, #1
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	e002      	b.n	8007e8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2202      	movs	r2, #2
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fbdd 	bl	8008654 <USBD_CtlSendData>
              break;
 8007e9a:	e004      	b.n	8007ea6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fb5b 	bl	800855a <USBD_CtlError>
              break;
 8007ea4:	bf00      	nop
          }
          break;
 8007ea6:	e004      	b.n	8007eb2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fb55 	bl	800855a <USBD_CtlError>
          break;
 8007eb0:	bf00      	nop
      }
      break;
 8007eb2:	e005      	b.n	8007ec0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fb4f 	bl	800855a <USBD_CtlError>
      break;
 8007ebc:	e000      	b.n	8007ec0 <USBD_StdEPReq+0x330>
      break;
 8007ebe:	bf00      	nop
  }

  return ret;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	885b      	ldrh	r3, [r3, #2]
 8007ee6:	0a1b      	lsrs	r3, r3, #8
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	2b06      	cmp	r3, #6
 8007eee:	f200 8128 	bhi.w	8008142 <USBD_GetDescriptor+0x276>
 8007ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <USBD_GetDescriptor+0x2c>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f15 	.word	0x08007f15
 8007efc:	08007f2d 	.word	0x08007f2d
 8007f00:	08007f6d 	.word	0x08007f6d
 8007f04:	08008143 	.word	0x08008143
 8007f08:	08008143 	.word	0x08008143
 8007f0c:	080080e3 	.word	0x080080e3
 8007f10:	0800810f 	.word	0x0800810f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	7c12      	ldrb	r2, [r2, #16]
 8007f20:	f107 0108 	add.w	r1, r7, #8
 8007f24:	4610      	mov	r0, r2
 8007f26:	4798      	blx	r3
 8007f28:	60f8      	str	r0, [r7, #12]
      break;
 8007f2a:	e112      	b.n	8008152 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	7c1b      	ldrb	r3, [r3, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10d      	bne.n	8007f50 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3c:	f107 0208 	add.w	r2, r7, #8
 8007f40:	4610      	mov	r0, r2
 8007f42:	4798      	blx	r3
 8007f44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f4e:	e100      	b.n	8008152 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f58:	f107 0208 	add.w	r2, r7, #8
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4798      	blx	r3
 8007f60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3301      	adds	r3, #1
 8007f66:	2202      	movs	r2, #2
 8007f68:	701a      	strb	r2, [r3, #0]
      break;
 8007f6a:	e0f2      	b.n	8008152 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	885b      	ldrh	r3, [r3, #2]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	f200 80ac 	bhi.w	80080d0 <USBD_GetDescriptor+0x204>
 8007f78:	a201      	add	r2, pc, #4	@ (adr r2, 8007f80 <USBD_GetDescriptor+0xb4>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	08007f99 	.word	0x08007f99
 8007f84:	08007fcd 	.word	0x08007fcd
 8007f88:	08008001 	.word	0x08008001
 8007f8c:	08008035 	.word	0x08008035
 8007f90:	08008069 	.word	0x08008069
 8007f94:	0800809d 	.word	0x0800809d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00b      	beq.n	8007fbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	7c12      	ldrb	r2, [r2, #16]
 8007fb0:	f107 0108 	add.w	r1, r7, #8
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	4798      	blx	r3
 8007fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fba:	e091      	b.n	80080e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 facb 	bl	800855a <USBD_CtlError>
            err++;
 8007fc4:	7afb      	ldrb	r3, [r7, #11]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fca:	e089      	b.n	80080e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	7c12      	ldrb	r2, [r2, #16]
 8007fe4:	f107 0108 	add.w	r1, r7, #8
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4798      	blx	r3
 8007fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fee:	e077      	b.n	80080e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fab1 	bl	800855a <USBD_CtlError>
            err++;
 8007ff8:	7afb      	ldrb	r3, [r7, #11]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ffe:	e06f      	b.n	80080e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	7c12      	ldrb	r2, [r2, #16]
 8008018:	f107 0108 	add.w	r1, r7, #8
 800801c:	4610      	mov	r0, r2
 800801e:	4798      	blx	r3
 8008020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008022:	e05d      	b.n	80080e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa97 	bl	800855a <USBD_CtlError>
            err++;
 800802c:	7afb      	ldrb	r3, [r7, #11]
 800802e:	3301      	adds	r3, #1
 8008030:	72fb      	strb	r3, [r7, #11]
          break;
 8008032:	e055      	b.n	80080e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	7c12      	ldrb	r2, [r2, #16]
 800804c:	f107 0108 	add.w	r1, r7, #8
 8008050:	4610      	mov	r0, r2
 8008052:	4798      	blx	r3
 8008054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008056:	e043      	b.n	80080e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fa7d 	bl	800855a <USBD_CtlError>
            err++;
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	3301      	adds	r3, #1
 8008064:	72fb      	strb	r3, [r7, #11]
          break;
 8008066:	e03b      	b.n	80080e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	7c12      	ldrb	r2, [r2, #16]
 8008080:	f107 0108 	add.w	r1, r7, #8
 8008084:	4610      	mov	r0, r2
 8008086:	4798      	blx	r3
 8008088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800808a:	e029      	b.n	80080e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa63 	bl	800855a <USBD_CtlError>
            err++;
 8008094:	7afb      	ldrb	r3, [r7, #11]
 8008096:	3301      	adds	r3, #1
 8008098:	72fb      	strb	r3, [r7, #11]
          break;
 800809a:	e021      	b.n	80080e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	7c12      	ldrb	r2, [r2, #16]
 80080b4:	f107 0108 	add.w	r1, r7, #8
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080be:	e00f      	b.n	80080e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa49 	bl	800855a <USBD_CtlError>
            err++;
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	3301      	adds	r3, #1
 80080cc:	72fb      	strb	r3, [r7, #11]
          break;
 80080ce:	e007      	b.n	80080e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa41 	bl	800855a <USBD_CtlError>
          err++;
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	3301      	adds	r3, #1
 80080dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80080de:	bf00      	nop
      }
      break;
 80080e0:	e037      	b.n	8008152 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	7c1b      	ldrb	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d109      	bne.n	80080fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f2:	f107 0208 	add.w	r2, r7, #8
 80080f6:	4610      	mov	r0, r2
 80080f8:	4798      	blx	r3
 80080fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080fc:	e029      	b.n	8008152 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fa2a 	bl	800855a <USBD_CtlError>
        err++;
 8008106:	7afb      	ldrb	r3, [r7, #11]
 8008108:	3301      	adds	r3, #1
 800810a:	72fb      	strb	r3, [r7, #11]
      break;
 800810c:	e021      	b.n	8008152 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7c1b      	ldrb	r3, [r3, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10d      	bne.n	8008132 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800811c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800811e:	f107 0208 	add.w	r2, r7, #8
 8008122:	4610      	mov	r0, r2
 8008124:	4798      	blx	r3
 8008126:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3301      	adds	r3, #1
 800812c:	2207      	movs	r2, #7
 800812e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008130:	e00f      	b.n	8008152 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fa10 	bl	800855a <USBD_CtlError>
        err++;
 800813a:	7afb      	ldrb	r3, [r7, #11]
 800813c:	3301      	adds	r3, #1
 800813e:	72fb      	strb	r3, [r7, #11]
      break;
 8008140:	e007      	b.n	8008152 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fa08 	bl	800855a <USBD_CtlError>
      err++;
 800814a:	7afb      	ldrb	r3, [r7, #11]
 800814c:	3301      	adds	r3, #1
 800814e:	72fb      	strb	r3, [r7, #11]
      break;
 8008150:	bf00      	nop
  }

  if (err != 0U)
 8008152:	7afb      	ldrb	r3, [r7, #11]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d11e      	bne.n	8008196 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	88db      	ldrh	r3, [r3, #6]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d016      	beq.n	800818e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008160:	893b      	ldrh	r3, [r7, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00e      	beq.n	8008184 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	88da      	ldrh	r2, [r3, #6]
 800816a:	893b      	ldrh	r3, [r7, #8]
 800816c:	4293      	cmp	r3, r2
 800816e:	bf28      	it	cs
 8008170:	4613      	movcs	r3, r2
 8008172:	b29b      	uxth	r3, r3
 8008174:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008176:	893b      	ldrh	r3, [r7, #8]
 8008178:	461a      	mov	r2, r3
 800817a:	68f9      	ldr	r1, [r7, #12]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fa69 	bl	8008654 <USBD_CtlSendData>
 8008182:	e009      	b.n	8008198 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f9e7 	bl	800855a <USBD_CtlError>
 800818c:	e004      	b.n	8008198 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 faba 	bl	8008708 <USBD_CtlSendStatus>
 8008194:	e000      	b.n	8008198 <USBD_GetDescriptor+0x2cc>
    return;
 8008196:	bf00      	nop
  }
}
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop

080081a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	889b      	ldrh	r3, [r3, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d131      	bne.n	8008216 <USBD_SetAddress+0x76>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	88db      	ldrh	r3, [r3, #6]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d12d      	bne.n	8008216 <USBD_SetAddress+0x76>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	885b      	ldrh	r3, [r3, #2]
 80081be:	2b7f      	cmp	r3, #127	@ 0x7f
 80081c0:	d829      	bhi.n	8008216 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	885b      	ldrh	r3, [r3, #2]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d104      	bne.n	80081e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f9bc 	bl	800855a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e2:	e01d      	b.n	8008220 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	7bfa      	ldrb	r2, [r7, #15]
 80081e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 ff1f 	bl	8009034 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa86 	bl	8008708 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820a:	e009      	b.n	8008220 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008214:	e004      	b.n	8008220 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f99e 	bl	800855a <USBD_CtlError>
  }
}
 800821e:	bf00      	nop
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	885b      	ldrh	r3, [r3, #2]
 800823a:	b2da      	uxtb	r2, r3
 800823c:	4b4e      	ldr	r3, [pc, #312]	@ (8008378 <USBD_SetConfig+0x150>)
 800823e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008240:	4b4d      	ldr	r3, [pc, #308]	@ (8008378 <USBD_SetConfig+0x150>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d905      	bls.n	8008254 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f985 	bl	800855a <USBD_CtlError>
    return USBD_FAIL;
 8008250:	2303      	movs	r3, #3
 8008252:	e08c      	b.n	800836e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b02      	cmp	r3, #2
 800825e:	d002      	beq.n	8008266 <USBD_SetConfig+0x3e>
 8008260:	2b03      	cmp	r3, #3
 8008262:	d029      	beq.n	80082b8 <USBD_SetConfig+0x90>
 8008264:	e075      	b.n	8008352 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008266:	4b44      	ldr	r3, [pc, #272]	@ (8008378 <USBD_SetConfig+0x150>)
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d020      	beq.n	80082b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800826e:	4b42      	ldr	r3, [pc, #264]	@ (8008378 <USBD_SetConfig+0x150>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008278:	4b3f      	ldr	r3, [pc, #252]	@ (8008378 <USBD_SetConfig+0x150>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7fe ffe3 	bl	800724a <USBD_SetClassConfig>
 8008284:	4603      	mov	r3, r0
 8008286:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d008      	beq.n	80082a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f962 	bl	800855a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2202      	movs	r2, #2
 800829a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800829e:	e065      	b.n	800836c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fa31 	bl	8008708 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2203      	movs	r2, #3
 80082aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80082ae:	e05d      	b.n	800836c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fa29 	bl	8008708 <USBD_CtlSendStatus>
      break;
 80082b6:	e059      	b.n	800836c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082b8:	4b2f      	ldr	r3, [pc, #188]	@ (8008378 <USBD_SetConfig+0x150>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d112      	bne.n	80082e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80082c8:	4b2b      	ldr	r3, [pc, #172]	@ (8008378 <USBD_SetConfig+0x150>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082d2:	4b29      	ldr	r3, [pc, #164]	@ (8008378 <USBD_SetConfig+0x150>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7fe ffd2 	bl	8007282 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa12 	bl	8008708 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082e4:	e042      	b.n	800836c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80082e6:	4b24      	ldr	r3, [pc, #144]	@ (8008378 <USBD_SetConfig+0x150>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d02a      	beq.n	800834a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7fe ffc0 	bl	8007282 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008302:	4b1d      	ldr	r3, [pc, #116]	@ (8008378 <USBD_SetConfig+0x150>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800830c:	4b1a      	ldr	r3, [pc, #104]	@ (8008378 <USBD_SetConfig+0x150>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fe ff99 	bl	800724a <USBD_SetClassConfig>
 8008318:	4603      	mov	r3, r0
 800831a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00f      	beq.n	8008342 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f918 	bl	800855a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	b2db      	uxtb	r3, r3
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7fe ffa5 	bl	8007282 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008340:	e014      	b.n	800836c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9e0 	bl	8008708 <USBD_CtlSendStatus>
      break;
 8008348:	e010      	b.n	800836c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f9dc 	bl	8008708 <USBD_CtlSendStatus>
      break;
 8008350:	e00c      	b.n	800836c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f900 	bl	800855a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800835a:	4b07      	ldr	r3, [pc, #28]	@ (8008378 <USBD_SetConfig+0x150>)
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7fe ff8e 	bl	8007282 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008366:	2303      	movs	r3, #3
 8008368:	73fb      	strb	r3, [r7, #15]
      break;
 800836a:	bf00      	nop
  }

  return ret;
 800836c:	7bfb      	ldrb	r3, [r7, #15]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	200004a8 	.word	0x200004a8

0800837c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	88db      	ldrh	r3, [r3, #6]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d004      	beq.n	8008398 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f8e2 	bl	800855a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008396:	e023      	b.n	80083e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	dc02      	bgt.n	80083aa <USBD_GetConfig+0x2e>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dc03      	bgt.n	80083b0 <USBD_GetConfig+0x34>
 80083a8:	e015      	b.n	80083d6 <USBD_GetConfig+0x5a>
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d00b      	beq.n	80083c6 <USBD_GetConfig+0x4a>
 80083ae:	e012      	b.n	80083d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3308      	adds	r3, #8
 80083ba:	2201      	movs	r2, #1
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f948 	bl	8008654 <USBD_CtlSendData>
        break;
 80083c4:	e00c      	b.n	80083e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3304      	adds	r3, #4
 80083ca:	2201      	movs	r2, #1
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f940 	bl	8008654 <USBD_CtlSendData>
        break;
 80083d4:	e004      	b.n	80083e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f8be 	bl	800855a <USBD_CtlError>
        break;
 80083de:	bf00      	nop
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	3b01      	subs	r3, #1
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d81e      	bhi.n	800843e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	88db      	ldrh	r3, [r3, #6]
 8008404:	2b02      	cmp	r3, #2
 8008406:	d004      	beq.n	8008412 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f8a5 	bl	800855a <USBD_CtlError>
        break;
 8008410:	e01a      	b.n	8008448 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800841e:	2b00      	cmp	r3, #0
 8008420:	d005      	beq.n	800842e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f043 0202 	orr.w	r2, r3, #2
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	330c      	adds	r3, #12
 8008432:	2202      	movs	r2, #2
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f90c 	bl	8008654 <USBD_CtlSendData>
      break;
 800843c:	e004      	b.n	8008448 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f88a 	bl	800855a <USBD_CtlError>
      break;
 8008446:	bf00      	nop
  }
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	885b      	ldrh	r3, [r3, #2]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d107      	bne.n	8008472 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f94c 	bl	8008708 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008470:	e013      	b.n	800849a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	885b      	ldrh	r3, [r3, #2]
 8008476:	2b02      	cmp	r3, #2
 8008478:	d10b      	bne.n	8008492 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	889b      	ldrh	r3, [r3, #4]
 800847e:	0a1b      	lsrs	r3, r3, #8
 8008480:	b29b      	uxth	r3, r3
 8008482:	b2da      	uxtb	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f93c 	bl	8008708 <USBD_CtlSendStatus>
}
 8008490:	e003      	b.n	800849a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f860 	bl	800855a <USBD_CtlError>
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b082      	sub	sp, #8
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	3b01      	subs	r3, #1
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d80b      	bhi.n	80084d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	885b      	ldrh	r3, [r3, #2]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d10c      	bne.n	80084dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f91c 	bl	8008708 <USBD_CtlSendStatus>
      }
      break;
 80084d0:	e004      	b.n	80084dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f840 	bl	800855a <USBD_CtlError>
      break;
 80084da:	e000      	b.n	80084de <USBD_ClrFeature+0x3c>
      break;
 80084dc:	bf00      	nop
  }
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3301      	adds	r3, #1
 8008500:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	781a      	ldrb	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3301      	adds	r3, #1
 800850e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f7ff fa40 	bl	8007996 <SWAPBYTE>
 8008516:	4603      	mov	r3, r0
 8008518:	461a      	mov	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3301      	adds	r3, #1
 8008522:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3301      	adds	r3, #1
 8008528:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f7ff fa33 	bl	8007996 <SWAPBYTE>
 8008530:	4603      	mov	r3, r0
 8008532:	461a      	mov	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3301      	adds	r3, #1
 800853c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3301      	adds	r3, #1
 8008542:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7ff fa26 	bl	8007996 <SWAPBYTE>
 800854a:	4603      	mov	r3, r0
 800854c:	461a      	mov	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	80da      	strh	r2, [r3, #6]
}
 8008552:	bf00      	nop
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008564:	2180      	movs	r1, #128	@ 0x80
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fcfa 	bl	8008f60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800856c:	2100      	movs	r1, #0
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fcf6 	bl	8008f60 <USBD_LL_StallEP>
}
 8008574:	bf00      	nop
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d042      	beq.n	8008618 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008596:	6938      	ldr	r0, [r7, #16]
 8008598:	f000 f842 	bl	8008620 <USBD_GetLen>
 800859c:	4603      	mov	r3, r0
 800859e:	3301      	adds	r3, #1
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085a6:	d808      	bhi.n	80085ba <USBD_GetString+0x3e>
 80085a8:	6938      	ldr	r0, [r7, #16]
 80085aa:	f000 f839 	bl	8008620 <USBD_GetLen>
 80085ae:	4603      	mov	r3, r0
 80085b0:	3301      	adds	r3, #1
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	e001      	b.n	80085be <USBD_GetString+0x42>
 80085ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	4413      	add	r3, r2
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	7812      	ldrb	r2, [r2, #0]
 80085cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80085ce:	7dfb      	ldrb	r3, [r7, #23]
 80085d0:	3301      	adds	r3, #1
 80085d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	4413      	add	r3, r2
 80085da:	2203      	movs	r2, #3
 80085dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80085de:	7dfb      	ldrb	r3, [r7, #23]
 80085e0:	3301      	adds	r3, #1
 80085e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80085e4:	e013      	b.n	800860e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	4413      	add	r3, r2
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	7812      	ldrb	r2, [r2, #0]
 80085f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	3301      	adds	r3, #1
 80085f6:	613b      	str	r3, [r7, #16]
    idx++;
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	3301      	adds	r3, #1
 80085fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	4413      	add	r3, r2
 8008604:	2200      	movs	r2, #0
 8008606:	701a      	strb	r2, [r3, #0]
    idx++;
 8008608:	7dfb      	ldrb	r3, [r7, #23]
 800860a:	3301      	adds	r3, #1
 800860c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e7      	bne.n	80085e6 <USBD_GetString+0x6a>
 8008616:	e000      	b.n	800861a <USBD_GetString+0x9e>
    return;
 8008618:	bf00      	nop
  }
}
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008630:	e005      	b.n	800863e <USBD_GetLen+0x1e>
  {
    len++;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	3301      	adds	r3, #1
 8008636:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	3301      	adds	r3, #1
 800863c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1f5      	bne.n	8008632 <USBD_GetLen+0x12>
  }

  return len;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2202      	movs	r2, #2
 8008664:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	2100      	movs	r1, #0
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 fcf9 	bl	8009072 <USBD_LL_Transmit>

  return USBD_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	2100      	movs	r1, #0
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 fce8 	bl	8009072 <USBD_LL_Transmit>

  return USBD_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2203      	movs	r2, #3
 80086bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	2100      	movs	r1, #0
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 fcec 	bl	80090b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	60f8      	str	r0, [r7, #12]
 80086ee:	60b9      	str	r1, [r7, #8]
 80086f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	2100      	movs	r1, #0
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 fcdb 	bl	80090b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2204      	movs	r2, #4
 8008714:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008718:	2300      	movs	r3, #0
 800871a:	2200      	movs	r2, #0
 800871c:	2100      	movs	r1, #0
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fca7 	bl	8009072 <USBD_LL_Transmit>

  return USBD_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2205      	movs	r2, #5
 800873a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800873e:	2300      	movs	r3, #0
 8008740:	2200      	movs	r2, #0
 8008742:	2100      	movs	r1, #0
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fcb5 	bl	80090b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008758:	2200      	movs	r2, #0
 800875a:	4912      	ldr	r1, [pc, #72]	@ (80087a4 <MX_USB_DEVICE_Init+0x50>)
 800875c:	4812      	ldr	r0, [pc, #72]	@ (80087a8 <MX_USB_DEVICE_Init+0x54>)
 800875e:	f7fe fcf7 	bl	8007150 <USBD_Init>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008768:	f7f8 f9e2 	bl	8000b30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800876c:	490f      	ldr	r1, [pc, #60]	@ (80087ac <MX_USB_DEVICE_Init+0x58>)
 800876e:	480e      	ldr	r0, [pc, #56]	@ (80087a8 <MX_USB_DEVICE_Init+0x54>)
 8008770:	f7fe fd1e 	bl	80071b0 <USBD_RegisterClass>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800877a:	f7f8 f9d9 	bl	8000b30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800877e:	490c      	ldr	r1, [pc, #48]	@ (80087b0 <MX_USB_DEVICE_Init+0x5c>)
 8008780:	4809      	ldr	r0, [pc, #36]	@ (80087a8 <MX_USB_DEVICE_Init+0x54>)
 8008782:	f7fe fc55 	bl	8007030 <USBD_CDC_RegisterInterface>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800878c:	f7f8 f9d0 	bl	8000b30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008790:	4805      	ldr	r0, [pc, #20]	@ (80087a8 <MX_USB_DEVICE_Init+0x54>)
 8008792:	f7fe fd43 	bl	800721c <USBD_Start>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800879c:	f7f8 f9c8 	bl	8000b30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087a0:	bf00      	nop
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	200000ac 	.word	0x200000ac
 80087a8:	200004ac 	.word	0x200004ac
 80087ac:	20000018 	.word	0x20000018
 80087b0:	20000098 	.word	0x20000098

080087b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80087b8:	2200      	movs	r2, #0
 80087ba:	4905      	ldr	r1, [pc, #20]	@ (80087d0 <CDC_Init_FS+0x1c>)
 80087bc:	4805      	ldr	r0, [pc, #20]	@ (80087d4 <CDC_Init_FS+0x20>)
 80087be:	f7fe fc51 	bl	8007064 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80087c2:	4905      	ldr	r1, [pc, #20]	@ (80087d8 <CDC_Init_FS+0x24>)
 80087c4:	4803      	ldr	r0, [pc, #12]	@ (80087d4 <CDC_Init_FS+0x20>)
 80087c6:	f7fe fc6f 	bl	80070a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80087ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000f88 	.word	0x20000f88
 80087d4:	200004ac 	.word	0x200004ac
 80087d8:	20000788 	.word	0x20000788

080087dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80087e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
 80087f8:	4613      	mov	r3, r2
 80087fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	2b23      	cmp	r3, #35	@ 0x23
 8008800:	d84a      	bhi.n	8008898 <CDC_Control_FS+0xac>
 8008802:	a201      	add	r2, pc, #4	@ (adr r2, 8008808 <CDC_Control_FS+0x1c>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	08008899 	.word	0x08008899
 800880c:	08008899 	.word	0x08008899
 8008810:	08008899 	.word	0x08008899
 8008814:	08008899 	.word	0x08008899
 8008818:	08008899 	.word	0x08008899
 800881c:	08008899 	.word	0x08008899
 8008820:	08008899 	.word	0x08008899
 8008824:	08008899 	.word	0x08008899
 8008828:	08008899 	.word	0x08008899
 800882c:	08008899 	.word	0x08008899
 8008830:	08008899 	.word	0x08008899
 8008834:	08008899 	.word	0x08008899
 8008838:	08008899 	.word	0x08008899
 800883c:	08008899 	.word	0x08008899
 8008840:	08008899 	.word	0x08008899
 8008844:	08008899 	.word	0x08008899
 8008848:	08008899 	.word	0x08008899
 800884c:	08008899 	.word	0x08008899
 8008850:	08008899 	.word	0x08008899
 8008854:	08008899 	.word	0x08008899
 8008858:	08008899 	.word	0x08008899
 800885c:	08008899 	.word	0x08008899
 8008860:	08008899 	.word	0x08008899
 8008864:	08008899 	.word	0x08008899
 8008868:	08008899 	.word	0x08008899
 800886c:	08008899 	.word	0x08008899
 8008870:	08008899 	.word	0x08008899
 8008874:	08008899 	.word	0x08008899
 8008878:	08008899 	.word	0x08008899
 800887c:	08008899 	.word	0x08008899
 8008880:	08008899 	.word	0x08008899
 8008884:	08008899 	.word	0x08008899
 8008888:	08008899 	.word	0x08008899
 800888c:	08008899 	.word	0x08008899
 8008890:	08008899 	.word	0x08008899
 8008894:	08008899 	.word	0x08008899
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008898:	bf00      	nop
  }

  return (USBD_OK);
 800889a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4814      	ldr	r0, [pc, #80]	@ (8008908 <CDC_Receive_FS+0x60>)
 80088b6:	f7fe fbf7 	bl	80070a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80088ba:	4813      	ldr	r0, [pc, #76]	@ (8008908 <CDC_Receive_FS+0x60>)
 80088bc:	f7fe fc12 	bl	80070e4 <USBD_CDC_ReceivePacket>
  memset (usb_rx_buffer, '\0', 64);  // clear USB RX buffer
 80088c0:	2240      	movs	r2, #64	@ 0x40
 80088c2:	2100      	movs	r1, #0
 80088c4:	4811      	ldr	r0, [pc, #68]	@ (800890c <CDC_Receive_FS+0x64>)
 80088c6:	f000 fc6d 	bl	80091a4 <memset>
  uint8_t len = (uint8_t)*Len;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	73fb      	strb	r3, [r7, #15]
  usb_rx_buff_len = len;
 80088d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008910 <CDC_Receive_FS+0x68>)
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	7013      	strb	r3, [r2, #0]
  memcpy(usb_rx_buffer, Buf, len);  // copy the data to the buffer
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	461a      	mov	r2, r3
 80088da:	6879      	ldr	r1, [r7, #4]
 80088dc:	480b      	ldr	r0, [pc, #44]	@ (800890c <CDC_Receive_FS+0x64>)
 80088de:	f000 fc8d 	bl	80091fc <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	461a      	mov	r2, r3
 80088e6:	2100      	movs	r1, #0
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fc5b 	bl	80091a4 <memset>
  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,SET);
 80088ee:	2201      	movs	r2, #1
 80088f0:	2101      	movs	r1, #1
 80088f2:	4808      	ldr	r0, [pc, #32]	@ (8008914 <CDC_Receive_FS+0x6c>)
 80088f4:	f7f9 fb18 	bl	8001f28 <HAL_GPIO_WritePin>
  new_usb_data = 1;
 80088f8:	4b07      	ldr	r3, [pc, #28]	@ (8008918 <CDC_Receive_FS+0x70>)
 80088fa:	2201      	movs	r2, #1
 80088fc:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 80088fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	200004ac 	.word	0x200004ac
 800890c:	2000031c 	.word	0x2000031c
 8008910:	20000318 	.word	0x20000318
 8008914:	40020400 	.word	0x40020400
 8008918:	2000035c 	.word	0x2000035c

0800891c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	4613      	mov	r3, r2
 8008928:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800892e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008932:	4618      	mov	r0, r3
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
	...

08008940 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	6039      	str	r1, [r7, #0]
 800894a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2212      	movs	r2, #18
 8008950:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008952:	4b03      	ldr	r3, [pc, #12]	@ (8008960 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	200000c8 	.word	0x200000c8

08008964 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2204      	movs	r2, #4
 8008974:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008976:	4b03      	ldr	r3, [pc, #12]	@ (8008984 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	200000dc 	.word	0x200000dc

08008988 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	6039      	str	r1, [r7, #0]
 8008992:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008994:	79fb      	ldrb	r3, [r7, #7]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d105      	bne.n	80089a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	4907      	ldr	r1, [pc, #28]	@ (80089bc <USBD_FS_ProductStrDescriptor+0x34>)
 800899e:	4808      	ldr	r0, [pc, #32]	@ (80089c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80089a0:	f7ff fdec 	bl	800857c <USBD_GetString>
 80089a4:	e004      	b.n	80089b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	4904      	ldr	r1, [pc, #16]	@ (80089bc <USBD_FS_ProductStrDescriptor+0x34>)
 80089aa:	4805      	ldr	r0, [pc, #20]	@ (80089c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80089ac:	f7ff fde6 	bl	800857c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089b0:	4b02      	ldr	r3, [pc, #8]	@ (80089bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20001788 	.word	0x20001788
 80089c0:	08009238 	.word	0x08009238

080089c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	6039      	str	r1, [r7, #0]
 80089ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	4904      	ldr	r1, [pc, #16]	@ (80089e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089d4:	4804      	ldr	r0, [pc, #16]	@ (80089e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089d6:	f7ff fdd1 	bl	800857c <USBD_GetString>
  return USBD_StrDesc;
 80089da:	4b02      	ldr	r3, [pc, #8]	@ (80089e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20001788 	.word	0x20001788
 80089e8:	08009248 	.word	0x08009248

080089ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	6039      	str	r1, [r7, #0]
 80089f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	221a      	movs	r2, #26
 80089fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089fe:	f000 f843 	bl	8008a88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a02:	4b02      	ldr	r3, [pc, #8]	@ (8008a0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	200000e0 	.word	0x200000e0

08008a10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	6039      	str	r1, [r7, #0]
 8008a1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d105      	bne.n	8008a2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	4907      	ldr	r1, [pc, #28]	@ (8008a44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a26:	4808      	ldr	r0, [pc, #32]	@ (8008a48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a28:	f7ff fda8 	bl	800857c <USBD_GetString>
 8008a2c:	e004      	b.n	8008a38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	4904      	ldr	r1, [pc, #16]	@ (8008a44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a32:	4805      	ldr	r0, [pc, #20]	@ (8008a48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a34:	f7ff fda2 	bl	800857c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a38:	4b02      	ldr	r3, [pc, #8]	@ (8008a44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20001788 	.word	0x20001788
 8008a48:	0800925c 	.word	0x0800925c

08008a4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	6039      	str	r1, [r7, #0]
 8008a56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d105      	bne.n	8008a6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	4907      	ldr	r1, [pc, #28]	@ (8008a80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a62:	4808      	ldr	r0, [pc, #32]	@ (8008a84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a64:	f7ff fd8a 	bl	800857c <USBD_GetString>
 8008a68:	e004      	b.n	8008a74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	4904      	ldr	r1, [pc, #16]	@ (8008a80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a6e:	4805      	ldr	r0, [pc, #20]	@ (8008a84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a70:	f7ff fd84 	bl	800857c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a74:	4b02      	ldr	r3, [pc, #8]	@ (8008a80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20001788 	.word	0x20001788
 8008a84:	08009238 	.word	0x08009238

08008a88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8008acc <Get_SerialNum+0x44>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a94:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad0 <Get_SerialNum+0x48>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad4 <Get_SerialNum+0x4c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008aae:	2208      	movs	r2, #8
 8008ab0:	4909      	ldr	r1, [pc, #36]	@ (8008ad8 <Get_SerialNum+0x50>)
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 f814 	bl	8008ae0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ab8:	2204      	movs	r2, #4
 8008aba:	4908      	ldr	r1, [pc, #32]	@ (8008adc <Get_SerialNum+0x54>)
 8008abc:	68b8      	ldr	r0, [r7, #8]
 8008abe:	f000 f80f 	bl	8008ae0 <IntToUnicode>
  }
}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	1fff7a10 	.word	0x1fff7a10
 8008ad0:	1fff7a14 	.word	0x1fff7a14
 8008ad4:	1fff7a18 	.word	0x1fff7a18
 8008ad8:	200000e2 	.word	0x200000e2
 8008adc:	200000f2 	.word	0x200000f2

08008ae0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	4613      	mov	r3, r2
 8008aec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008aee:	2300      	movs	r3, #0
 8008af0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008af2:	2300      	movs	r3, #0
 8008af4:	75fb      	strb	r3, [r7, #23]
 8008af6:	e027      	b.n	8008b48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	0f1b      	lsrs	r3, r3, #28
 8008afc:	2b09      	cmp	r3, #9
 8008afe:	d80b      	bhi.n	8008b18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	0f1b      	lsrs	r3, r3, #28
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	440b      	add	r3, r1
 8008b10:	3230      	adds	r2, #48	@ 0x30
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	701a      	strb	r2, [r3, #0]
 8008b16:	e00a      	b.n	8008b2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	0f1b      	lsrs	r3, r3, #28
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	4619      	mov	r1, r3
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	440b      	add	r3, r1
 8008b28:	3237      	adds	r2, #55	@ 0x37
 8008b2a:	b2d2      	uxtb	r2, r2
 8008b2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b34:	7dfb      	ldrb	r3, [r7, #23]
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	3301      	adds	r3, #1
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	3301      	adds	r3, #1
 8008b46:	75fb      	strb	r3, [r7, #23]
 8008b48:	7dfa      	ldrb	r2, [r7, #23]
 8008b4a:	79fb      	ldrb	r3, [r7, #7]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d3d3      	bcc.n	8008af8 <IntToUnicode+0x18>
  }
}
 8008b50:	bf00      	nop
 8008b52:	bf00      	nop
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
	...

08008b60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	@ 0x28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b68:	f107 0314 	add.w	r3, r7, #20
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	605a      	str	r2, [r3, #4]
 8008b72:	609a      	str	r2, [r3, #8]
 8008b74:	60da      	str	r2, [r3, #12]
 8008b76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b80:	d147      	bne.n	8008c12 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b82:	2300      	movs	r3, #0
 8008b84:	613b      	str	r3, [r7, #16]
 8008b86:	4b25      	ldr	r3, [pc, #148]	@ (8008c1c <HAL_PCD_MspInit+0xbc>)
 8008b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8a:	4a24      	ldr	r2, [pc, #144]	@ (8008c1c <HAL_PCD_MspInit+0xbc>)
 8008b8c:	f043 0301 	orr.w	r3, r3, #1
 8008b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8008b92:	4b22      	ldr	r3, [pc, #136]	@ (8008c1c <HAL_PCD_MspInit+0xbc>)
 8008b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	613b      	str	r3, [r7, #16]
 8008b9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008b9e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8008ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bac:	2303      	movs	r3, #3
 8008bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008bb0:	230a      	movs	r3, #10
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bb4:	f107 0314 	add.w	r3, r7, #20
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4819      	ldr	r0, [pc, #100]	@ (8008c20 <HAL_PCD_MspInit+0xc0>)
 8008bbc:	f7f9 f808 	bl	8001bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008bce:	f107 0314 	add.w	r3, r7, #20
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4812      	ldr	r0, [pc, #72]	@ (8008c20 <HAL_PCD_MspInit+0xc0>)
 8008bd6:	f7f8 fffb 	bl	8001bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008bda:	4b10      	ldr	r3, [pc, #64]	@ (8008c1c <HAL_PCD_MspInit+0xbc>)
 8008bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bde:	4a0f      	ldr	r2, [pc, #60]	@ (8008c1c <HAL_PCD_MspInit+0xbc>)
 8008be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008be4:	6353      	str	r3, [r2, #52]	@ 0x34
 8008be6:	2300      	movs	r3, #0
 8008be8:	60fb      	str	r3, [r7, #12]
 8008bea:	4b0c      	ldr	r3, [pc, #48]	@ (8008c1c <HAL_PCD_MspInit+0xbc>)
 8008bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bee:	4a0b      	ldr	r2, [pc, #44]	@ (8008c1c <HAL_PCD_MspInit+0xbc>)
 8008bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8008bf6:	4b09      	ldr	r3, [pc, #36]	@ (8008c1c <HAL_PCD_MspInit+0xbc>)
 8008bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c02:	2200      	movs	r2, #0
 8008c04:	2100      	movs	r1, #0
 8008c06:	2043      	movs	r0, #67	@ 0x43
 8008c08:	f7f8 fb8d 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c0c:	2043      	movs	r0, #67	@ 0x43
 8008c0e:	f7f8 fba6 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c12:	bf00      	nop
 8008c14:	3728      	adds	r7, #40	@ 0x28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	40020000 	.word	0x40020000

08008c24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	f7fe fb3b 	bl	80072b6 <USBD_LL_SetupStage>
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	6879      	ldr	r1, [r7, #4]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	4413      	add	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	440b      	add	r3, r1
 8008c68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	4619      	mov	r1, r3
 8008c72:	f7fe fb75 	bl	8007360 <USBD_LL_DataOutStage>
}
 8008c76:	bf00      	nop
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008c90:	78fa      	ldrb	r2, [r7, #3]
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	4613      	mov	r3, r2
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	4413      	add	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	440b      	add	r3, r1
 8008c9e:	3320      	adds	r3, #32
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	f7fe fc0e 	bl	80074c6 <USBD_LL_DataInStage>
}
 8008caa:	bf00      	nop
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe fd48 	bl	8007756 <USBD_LL_SOF>
}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	79db      	ldrb	r3, [r3, #7]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d102      	bne.n	8008ce8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]
 8008ce6:	e008      	b.n	8008cfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	79db      	ldrb	r3, [r3, #7]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d102      	bne.n	8008cf6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	73fb      	strb	r3, [r7, #15]
 8008cf4:	e001      	b.n	8008cfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008cf6:	f7f7 ff1b 	bl	8000b30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d00:	7bfa      	ldrb	r2, [r7, #15]
 8008d02:	4611      	mov	r1, r2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fe fce2 	bl	80076ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe fc8a 	bl	800762a <USBD_LL_Reset>
}
 8008d16:	bf00      	nop
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fe fcdd 	bl	80076ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6812      	ldr	r2, [r2, #0]
 8008d42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008d46:	f043 0301 	orr.w	r3, r3, #1
 8008d4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	7adb      	ldrb	r3, [r3, #11]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d005      	beq.n	8008d60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d54:	4b04      	ldr	r3, [pc, #16]	@ (8008d68 <HAL_PCD_SuspendCallback+0x48>)
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	4a03      	ldr	r2, [pc, #12]	@ (8008d68 <HAL_PCD_SuspendCallback+0x48>)
 8008d5a:	f043 0306 	orr.w	r3, r3, #6
 8008d5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	e000ed00 	.word	0xe000ed00

08008d6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fcd3 	bl	8007726 <USBD_LL_Resume>
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d9a:	78fa      	ldrb	r2, [r7, #3]
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe fd2b 	bl	80077fa <USBD_LL_IsoOUTIncomplete>
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe fce7 	bl	8007796 <USBD_LL_IsoINIncomplete>
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fd3d 	bl	800785e <USBD_LL_DevConnected>
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe fd3a 	bl	8007874 <USBD_LL_DevDisconnected>
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d13c      	bne.n	8008e92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e18:	4a20      	ldr	r2, [pc, #128]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a1e      	ldr	r2, [pc, #120]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e24:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e28:	4b1c      	ldr	r3, [pc, #112]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008e2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e30:	4b1a      	ldr	r3, [pc, #104]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e32:	2204      	movs	r2, #4
 8008e34:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e36:	4b19      	ldr	r3, [pc, #100]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e38:	2202      	movs	r2, #2
 8008e3a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e3c:	4b17      	ldr	r3, [pc, #92]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e42:	4b16      	ldr	r3, [pc, #88]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e44:	2202      	movs	r2, #2
 8008e46:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008e48:	4b14      	ldr	r3, [pc, #80]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e4e:	4b13      	ldr	r3, [pc, #76]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e54:	4b11      	ldr	r3, [pc, #68]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008e5a:	4b10      	ldr	r3, [pc, #64]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e60:	4b0e      	ldr	r3, [pc, #56]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e66:	480d      	ldr	r0, [pc, #52]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e68:	f7f9 f891 	bl	8001f8e <HAL_PCD_Init>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e72:	f7f7 fe5d 	bl	8000b30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e76:	2180      	movs	r1, #128	@ 0x80
 8008e78:	4808      	ldr	r0, [pc, #32]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e7a:	f7fa fabe 	bl	80033fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e7e:	2240      	movs	r2, #64	@ 0x40
 8008e80:	2100      	movs	r1, #0
 8008e82:	4806      	ldr	r0, [pc, #24]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e84:	f7fa fa72 	bl	800336c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e88:	2280      	movs	r2, #128	@ 0x80
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	4803      	ldr	r0, [pc, #12]	@ (8008e9c <USBD_LL_Init+0x94>)
 8008e8e:	f7fa fa6d 	bl	800336c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20001988 	.word	0x20001988

08008ea0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7f9 f978 	bl	80021ac <HAL_PCD_Start>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f942 	bl	800914c <USBD_Get_USB_Status>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	4608      	mov	r0, r1
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	70fb      	strb	r3, [r7, #3]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70bb      	strb	r3, [r7, #2]
 8008eec:	4613      	mov	r3, r2
 8008eee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008efe:	78bb      	ldrb	r3, [r7, #2]
 8008f00:	883a      	ldrh	r2, [r7, #0]
 8008f02:	78f9      	ldrb	r1, [r7, #3]
 8008f04:	f7f9 fe4c 	bl	8002ba0 <HAL_PCD_EP_Open>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 f91c 	bl	800914c <USBD_Get_USB_Status>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	4611      	mov	r1, r2
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7f9 fe97 	bl	8002c74 <HAL_PCD_EP_Close>
 8008f46:	4603      	mov	r3, r0
 8008f48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 f8fd 	bl	800914c <USBD_Get_USB_Status>
 8008f52:	4603      	mov	r3, r0
 8008f54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f7a:	78fa      	ldrb	r2, [r7, #3]
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7f9 ff4f 	bl	8002e22 <HAL_PCD_EP_SetStall>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 f8de 	bl	800914c <USBD_Get_USB_Status>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fb8:	78fa      	ldrb	r2, [r7, #3]
 8008fba:	4611      	mov	r1, r2
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7f9 ff93 	bl	8002ee8 <HAL_PCD_EP_ClrStall>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f8bf 	bl	800914c <USBD_Get_USB_Status>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	da0b      	bge.n	8009010 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	4613      	mov	r3, r2
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	440b      	add	r3, r1
 800900a:	3316      	adds	r3, #22
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	e00b      	b.n	8009028 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009010:	78fb      	ldrb	r3, [r7, #3]
 8009012:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009016:	68f9      	ldr	r1, [r7, #12]
 8009018:	4613      	mov	r3, r2
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	4413      	add	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	440b      	add	r3, r1
 8009022:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009026:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	4611      	mov	r1, r2
 8009052:	4618      	mov	r0, r3
 8009054:	f7f9 fd80 	bl	8002b58 <HAL_PCD_SetAddress>
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f874 	bl	800914c <USBD_Get_USB_Status>
 8009064:	4603      	mov	r3, r0
 8009066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009068:	7bbb      	ldrb	r3, [r7, #14]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b086      	sub	sp, #24
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]
 800907e:	460b      	mov	r3, r1
 8009080:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009090:	7af9      	ldrb	r1, [r7, #11]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	f7f9 fe8a 	bl	8002dae <HAL_PCD_EP_Transmit>
 800909a:	4603      	mov	r3, r0
 800909c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800909e:	7dfb      	ldrb	r3, [r7, #23]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f853 	bl	800914c <USBD_Get_USB_Status>
 80090a6:	4603      	mov	r3, r0
 80090a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3718      	adds	r7, #24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	607a      	str	r2, [r7, #4]
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	460b      	mov	r3, r1
 80090c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80090d2:	7af9      	ldrb	r1, [r7, #11]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	f7f9 fe16 	bl	8002d08 <HAL_PCD_EP_Receive>
 80090dc:	4603      	mov	r3, r0
 80090de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 f832 	bl	800914c <USBD_Get_USB_Status>
 80090e8:	4603      	mov	r3, r0
 80090ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009108:	78fa      	ldrb	r2, [r7, #3]
 800910a:	4611      	mov	r1, r2
 800910c:	4618      	mov	r0, r3
 800910e:	f7f9 fe36 	bl	8002d7e <HAL_PCD_EP_GetRxCount>
 8009112:	4603      	mov	r3, r0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009124:	4b03      	ldr	r3, [pc, #12]	@ (8009134 <USBD_static_malloc+0x18>)
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20001e6c 	.word	0x20001e6c

08009138 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]

}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	2b03      	cmp	r3, #3
 800915e:	d817      	bhi.n	8009190 <USBD_Get_USB_Status+0x44>
 8009160:	a201      	add	r2, pc, #4	@ (adr r2, 8009168 <USBD_Get_USB_Status+0x1c>)
 8009162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009166:	bf00      	nop
 8009168:	08009179 	.word	0x08009179
 800916c:	0800917f 	.word	0x0800917f
 8009170:	08009185 	.word	0x08009185
 8009174:	0800918b 	.word	0x0800918b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73fb      	strb	r3, [r7, #15]
    break;
 800917c:	e00b      	b.n	8009196 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800917e:	2303      	movs	r3, #3
 8009180:	73fb      	strb	r3, [r7, #15]
    break;
 8009182:	e008      	b.n	8009196 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009184:	2301      	movs	r3, #1
 8009186:	73fb      	strb	r3, [r7, #15]
    break;
 8009188:	e005      	b.n	8009196 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800918a:	2303      	movs	r3, #3
 800918c:	73fb      	strb	r3, [r7, #15]
    break;
 800918e:	e002      	b.n	8009196 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009190:	2303      	movs	r3, #3
 8009192:	73fb      	strb	r3, [r7, #15]
    break;
 8009194:	bf00      	nop
  }
  return usb_status;
 8009196:	7bfb      	ldrb	r3, [r7, #15]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <memset>:
 80091a4:	4402      	add	r2, r0
 80091a6:	4603      	mov	r3, r0
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d100      	bne.n	80091ae <memset+0xa>
 80091ac:	4770      	bx	lr
 80091ae:	f803 1b01 	strb.w	r1, [r3], #1
 80091b2:	e7f9      	b.n	80091a8 <memset+0x4>

080091b4 <__libc_init_array>:
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	4d0d      	ldr	r5, [pc, #52]	@ (80091ec <__libc_init_array+0x38>)
 80091b8:	4c0d      	ldr	r4, [pc, #52]	@ (80091f0 <__libc_init_array+0x3c>)
 80091ba:	1b64      	subs	r4, r4, r5
 80091bc:	10a4      	asrs	r4, r4, #2
 80091be:	2600      	movs	r6, #0
 80091c0:	42a6      	cmp	r6, r4
 80091c2:	d109      	bne.n	80091d8 <__libc_init_array+0x24>
 80091c4:	4d0b      	ldr	r5, [pc, #44]	@ (80091f4 <__libc_init_array+0x40>)
 80091c6:	4c0c      	ldr	r4, [pc, #48]	@ (80091f8 <__libc_init_array+0x44>)
 80091c8:	f000 f826 	bl	8009218 <_init>
 80091cc:	1b64      	subs	r4, r4, r5
 80091ce:	10a4      	asrs	r4, r4, #2
 80091d0:	2600      	movs	r6, #0
 80091d2:	42a6      	cmp	r6, r4
 80091d4:	d105      	bne.n	80091e2 <__libc_init_array+0x2e>
 80091d6:	bd70      	pop	{r4, r5, r6, pc}
 80091d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091dc:	4798      	blx	r3
 80091de:	3601      	adds	r6, #1
 80091e0:	e7ee      	b.n	80091c0 <__libc_init_array+0xc>
 80091e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e6:	4798      	blx	r3
 80091e8:	3601      	adds	r6, #1
 80091ea:	e7f2      	b.n	80091d2 <__libc_init_array+0x1e>
 80091ec:	08009294 	.word	0x08009294
 80091f0:	08009294 	.word	0x08009294
 80091f4:	08009294 	.word	0x08009294
 80091f8:	08009298 	.word	0x08009298

080091fc <memcpy>:
 80091fc:	440a      	add	r2, r1
 80091fe:	4291      	cmp	r1, r2
 8009200:	f100 33ff 	add.w	r3, r0, #4294967295
 8009204:	d100      	bne.n	8009208 <memcpy+0xc>
 8009206:	4770      	bx	lr
 8009208:	b510      	push	{r4, lr}
 800920a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800920e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009212:	4291      	cmp	r1, r2
 8009214:	d1f9      	bne.n	800920a <memcpy+0xe>
 8009216:	bd10      	pop	{r4, pc}

08009218 <_init>:
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	bf00      	nop
 800921c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921e:	bc08      	pop	{r3}
 8009220:	469e      	mov	lr, r3
 8009222:	4770      	bx	lr

08009224 <_fini>:
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009226:	bf00      	nop
 8009228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922a:	bc08      	pop	{r3}
 800922c:	469e      	mov	lr, r3
 800922e:	4770      	bx	lr
